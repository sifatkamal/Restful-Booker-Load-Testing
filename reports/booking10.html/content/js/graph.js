/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 262.0, "minX": 0.0, "maxY": 10242.0, "series": [{"data": [[0.0, 262.0], [0.1, 262.0], [0.2, 262.0], [0.3, 262.0], [0.4, 263.0], [0.5, 263.0], [0.6, 263.0], [0.7, 263.0], [0.8, 263.0], [0.9, 263.0], [1.0, 263.0], [1.1, 263.0], [1.2, 263.0], [1.3, 263.0], [1.4, 263.0], [1.5, 263.0], [1.6, 263.0], [1.7, 263.0], [1.8, 263.0], [1.9, 263.0], [2.0, 263.0], [2.1, 263.0], [2.2, 263.0], [2.3, 263.0], [2.4, 264.0], [2.5, 264.0], [2.6, 264.0], [2.7, 264.0], [2.8, 264.0], [2.9, 264.0], [3.0, 264.0], [3.1, 264.0], [3.2, 264.0], [3.3, 264.0], [3.4, 264.0], [3.5, 264.0], [3.6, 264.0], [3.7, 264.0], [3.8, 264.0], [3.9, 264.0], [4.0, 264.0], [4.1, 264.0], [4.2, 264.0], [4.3, 264.0], [4.4, 264.0], [4.5, 264.0], [4.6, 264.0], [4.7, 264.0], [4.8, 264.0], [4.9, 264.0], [5.0, 264.0], [5.1, 264.0], [5.2, 264.0], [5.3, 264.0], [5.4, 264.0], [5.5, 264.0], [5.6, 264.0], [5.7, 264.0], [5.8, 264.0], [5.9, 264.0], [6.0, 264.0], [6.1, 264.0], [6.2, 264.0], [6.3, 264.0], [6.4, 264.0], [6.5, 265.0], [6.6, 265.0], [6.7, 265.0], [6.8, 265.0], [6.9, 265.0], [7.0, 265.0], [7.1, 265.0], [7.2, 265.0], [7.3, 265.0], [7.4, 265.0], [7.5, 265.0], [7.6, 265.0], [7.7, 265.0], [7.8, 265.0], [7.9, 265.0], [8.0, 265.0], [8.1, 265.0], [8.2, 265.0], [8.3, 265.0], [8.4, 265.0], [8.5, 265.0], [8.6, 265.0], [8.7, 265.0], [8.8, 265.0], [8.9, 265.0], [9.0, 265.0], [9.1, 265.0], [9.2, 265.0], [9.3, 265.0], [9.4, 265.0], [9.5, 265.0], [9.6, 265.0], [9.7, 265.0], [9.8, 265.0], [9.9, 265.0], [10.0, 265.0], [10.1, 265.0], [10.2, 265.0], [10.3, 266.0], [10.4, 266.0], [10.5, 266.0], [10.6, 266.0], [10.7, 266.0], [10.8, 266.0], [10.9, 266.0], [11.0, 266.0], [11.1, 266.0], [11.2, 266.0], [11.3, 266.0], [11.4, 266.0], [11.5, 266.0], [11.6, 266.0], [11.7, 266.0], [11.8, 266.0], [11.9, 266.0], [12.0, 266.0], [12.1, 266.0], [12.2, 266.0], [12.3, 266.0], [12.4, 266.0], [12.5, 266.0], [12.6, 266.0], [12.7, 266.0], [12.8, 266.0], [12.9, 266.0], [13.0, 266.0], [13.1, 267.0], [13.2, 267.0], [13.3, 267.0], [13.4, 267.0], [13.5, 267.0], [13.6, 267.0], [13.7, 267.0], [13.8, 267.0], [13.9, 267.0], [14.0, 267.0], [14.1, 267.0], [14.2, 267.0], [14.3, 267.0], [14.4, 267.0], [14.5, 267.0], [14.6, 267.0], [14.7, 268.0], [14.8, 268.0], [14.9, 268.0], [15.0, 268.0], [15.1, 268.0], [15.2, 268.0], [15.3, 268.0], [15.4, 268.0], [15.5, 268.0], [15.6, 268.0], [15.7, 268.0], [15.8, 268.0], [15.9, 268.0], [16.0, 268.0], [16.1, 268.0], [16.2, 268.0], [16.3, 269.0], [16.4, 269.0], [16.5, 269.0], [16.6, 269.0], [16.7, 269.0], [16.8, 269.0], [16.9, 269.0], [17.0, 269.0], [17.1, 269.0], [17.2, 269.0], [17.3, 269.0], [17.4, 269.0], [17.5, 269.0], [17.6, 269.0], [17.7, 270.0], [17.8, 270.0], [17.9, 270.0], [18.0, 270.0], [18.1, 270.0], [18.2, 270.0], [18.3, 270.0], [18.4, 270.0], [18.5, 270.0], [18.6, 270.0], [18.7, 271.0], [18.8, 271.0], [18.9, 271.0], [19.0, 271.0], [19.1, 271.0], [19.2, 272.0], [19.3, 272.0], [19.4, 272.0], [19.5, 272.0], [19.6, 272.0], [19.7, 273.0], [19.8, 273.0], [19.9, 273.0], [20.0, 273.0], [20.1, 273.0], [20.2, 273.0], [20.3, 273.0], [20.4, 273.0], [20.5, 274.0], [20.6, 274.0], [20.7, 274.0], [20.8, 274.0], [20.9, 274.0], [21.0, 274.0], [21.1, 274.0], [21.2, 274.0], [21.3, 274.0], [21.4, 274.0], [21.5, 274.0], [21.6, 275.0], [21.7, 275.0], [21.8, 275.0], [21.9, 275.0], [22.0, 275.0], [22.1, 276.0], [22.2, 276.0], [22.3, 276.0], [22.4, 276.0], [22.5, 276.0], [22.6, 276.0], [22.7, 276.0], [22.8, 276.0], [22.9, 276.0], [23.0, 276.0], [23.1, 276.0], [23.2, 277.0], [23.3, 277.0], [23.4, 277.0], [23.5, 277.0], [23.6, 277.0], [23.7, 277.0], [23.8, 277.0], [23.9, 278.0], [24.0, 278.0], [24.1, 278.0], [24.2, 279.0], [24.3, 279.0], [24.4, 279.0], [24.5, 279.0], [24.6, 279.0], [24.7, 279.0], [24.8, 279.0], [24.9, 280.0], [25.0, 280.0], [25.1, 280.0], [25.2, 281.0], [25.3, 281.0], [25.4, 281.0], [25.5, 281.0], [25.6, 282.0], [25.7, 282.0], [25.8, 282.0], [25.9, 282.0], [26.0, 282.0], [26.1, 283.0], [26.2, 283.0], [26.3, 283.0], [26.4, 284.0], [26.5, 284.0], [26.6, 284.0], [26.7, 284.0], [26.8, 284.0], [26.9, 284.0], [27.0, 284.0], [27.1, 285.0], [27.2, 285.0], [27.3, 285.0], [27.4, 286.0], [27.5, 286.0], [27.6, 286.0], [27.7, 287.0], [27.8, 287.0], [27.9, 287.0], [28.0, 287.0], [28.1, 288.0], [28.2, 288.0], [28.3, 288.0], [28.4, 288.0], [28.5, 289.0], [28.6, 289.0], [28.7, 290.0], [28.8, 290.0], [28.9, 290.0], [29.0, 291.0], [29.1, 291.0], [29.2, 291.0], [29.3, 291.0], [29.4, 292.0], [29.5, 292.0], [29.6, 292.0], [29.7, 292.0], [29.8, 293.0], [29.9, 294.0], [30.0, 294.0], [30.1, 294.0], [30.2, 295.0], [30.3, 295.0], [30.4, 295.0], [30.5, 296.0], [30.6, 296.0], [30.7, 297.0], [30.8, 297.0], [30.9, 297.0], [31.0, 298.0], [31.1, 298.0], [31.2, 298.0], [31.3, 299.0], [31.4, 300.0], [31.5, 300.0], [31.6, 300.0], [31.7, 300.0], [31.8, 300.0], [31.9, 300.0], [32.0, 300.0], [32.1, 301.0], [32.2, 301.0], [32.3, 301.0], [32.4, 301.0], [32.5, 301.0], [32.6, 302.0], [32.7, 302.0], [32.8, 302.0], [32.9, 302.0], [33.0, 302.0], [33.1, 302.0], [33.2, 302.0], [33.3, 302.0], [33.4, 303.0], [33.5, 303.0], [33.6, 303.0], [33.7, 303.0], [33.8, 303.0], [33.9, 303.0], [34.0, 304.0], [34.1, 304.0], [34.2, 304.0], [34.3, 304.0], [34.4, 304.0], [34.5, 304.0], [34.6, 304.0], [34.7, 304.0], [34.8, 304.0], [34.9, 304.0], [35.0, 304.0], [35.1, 304.0], [35.2, 304.0], [35.3, 305.0], [35.4, 305.0], [35.5, 305.0], [35.6, 305.0], [35.7, 305.0], [35.8, 305.0], [35.9, 305.0], [36.0, 305.0], [36.1, 305.0], [36.2, 305.0], [36.3, 305.0], [36.4, 305.0], [36.5, 305.0], [36.6, 305.0], [36.7, 306.0], [36.8, 306.0], [36.9, 306.0], [37.0, 306.0], [37.1, 306.0], [37.2, 306.0], [37.3, 306.0], [37.4, 306.0], [37.5, 306.0], [37.6, 306.0], [37.7, 306.0], [37.8, 306.0], [37.9, 306.0], [38.0, 306.0], [38.1, 306.0], [38.2, 307.0], [38.3, 307.0], [38.4, 307.0], [38.5, 307.0], [38.6, 307.0], [38.7, 307.0], [38.8, 307.0], [38.9, 307.0], [39.0, 307.0], [39.1, 307.0], [39.2, 307.0], [39.3, 307.0], [39.4, 307.0], [39.5, 307.0], [39.6, 307.0], [39.7, 307.0], [39.8, 307.0], [39.9, 308.0], [40.0, 308.0], [40.1, 308.0], [40.2, 308.0], [40.3, 308.0], [40.4, 308.0], [40.5, 308.0], [40.6, 308.0], [40.7, 308.0], [40.8, 308.0], [40.9, 308.0], [41.0, 308.0], [41.1, 308.0], [41.2, 308.0], [41.3, 308.0], [41.4, 308.0], [41.5, 308.0], [41.6, 308.0], [41.7, 308.0], [41.8, 308.0], [41.9, 308.0], [42.0, 308.0], [42.1, 308.0], [42.2, 309.0], [42.3, 309.0], [42.4, 309.0], [42.5, 309.0], [42.6, 309.0], [42.7, 309.0], [42.8, 309.0], [42.9, 309.0], [43.0, 309.0], [43.1, 309.0], [43.2, 309.0], [43.3, 309.0], [43.4, 309.0], [43.5, 309.0], [43.6, 309.0], [43.7, 309.0], [43.8, 309.0], [43.9, 309.0], [44.0, 309.0], [44.1, 309.0], [44.2, 309.0], [44.3, 309.0], [44.4, 309.0], [44.5, 309.0], [44.6, 309.0], [44.7, 309.0], [44.8, 309.0], [44.9, 310.0], [45.0, 310.0], [45.1, 310.0], [45.2, 310.0], [45.3, 310.0], [45.4, 310.0], [45.5, 310.0], [45.6, 310.0], [45.7, 310.0], [45.8, 310.0], [45.9, 310.0], [46.0, 310.0], [46.1, 310.0], [46.2, 310.0], [46.3, 310.0], [46.4, 310.0], [46.5, 310.0], [46.6, 310.0], [46.7, 310.0], [46.8, 310.0], [46.9, 310.0], [47.0, 310.0], [47.1, 310.0], [47.2, 310.0], [47.3, 310.0], [47.4, 310.0], [47.5, 310.0], [47.6, 310.0], [47.7, 310.0], [47.8, 310.0], [47.9, 310.0], [48.0, 310.0], [48.1, 310.0], [48.2, 310.0], [48.3, 310.0], [48.4, 310.0], [48.5, 310.0], [48.6, 310.0], [48.7, 310.0], [48.8, 310.0], [48.9, 310.0], [49.0, 310.0], [49.1, 310.0], [49.2, 310.0], [49.3, 311.0], [49.4, 311.0], [49.5, 311.0], [49.6, 311.0], [49.7, 311.0], [49.8, 311.0], [49.9, 311.0], [50.0, 311.0], [50.1, 311.0], [50.2, 311.0], [50.3, 311.0], [50.4, 311.0], [50.5, 311.0], [50.6, 311.0], [50.7, 311.0], [50.8, 311.0], [50.9, 311.0], [51.0, 311.0], [51.1, 311.0], [51.2, 311.0], [51.3, 311.0], [51.4, 311.0], [51.5, 311.0], [51.6, 311.0], [51.7, 311.0], [51.8, 311.0], [51.9, 311.0], [52.0, 311.0], [52.1, 311.0], [52.2, 311.0], [52.3, 311.0], [52.4, 311.0], [52.5, 311.0], [52.6, 311.0], [52.7, 311.0], [52.8, 311.0], [52.9, 311.0], [53.0, 311.0], [53.1, 311.0], [53.2, 311.0], [53.3, 311.0], [53.4, 311.0], [53.5, 311.0], [53.6, 311.0], [53.7, 311.0], [53.8, 311.0], [53.9, 311.0], [54.0, 311.0], [54.1, 311.0], [54.2, 311.0], [54.3, 311.0], [54.4, 311.0], [54.5, 311.0], [54.6, 311.0], [54.7, 311.0], [54.8, 311.0], [54.9, 311.0], [55.0, 311.0], [55.1, 311.0], [55.2, 312.0], [55.3, 312.0], [55.4, 312.0], [55.5, 312.0], [55.6, 312.0], [55.7, 312.0], [55.8, 312.0], [55.9, 312.0], [56.0, 312.0], [56.1, 312.0], [56.2, 312.0], [56.3, 312.0], [56.4, 312.0], [56.5, 312.0], [56.6, 312.0], [56.7, 312.0], [56.8, 312.0], [56.9, 312.0], [57.0, 312.0], [57.1, 312.0], [57.2, 312.0], [57.3, 312.0], [57.4, 312.0], [57.5, 312.0], [57.6, 312.0], [57.7, 312.0], [57.8, 312.0], [57.9, 312.0], [58.0, 312.0], [58.1, 312.0], [58.2, 312.0], [58.3, 312.0], [58.4, 312.0], [58.5, 313.0], [58.6, 313.0], [58.7, 313.0], [58.8, 313.0], [58.9, 313.0], [59.0, 313.0], [59.1, 313.0], [59.2, 313.0], [59.3, 313.0], [59.4, 313.0], [59.5, 313.0], [59.6, 313.0], [59.7, 313.0], [59.8, 313.0], [59.9, 313.0], [60.0, 313.0], [60.1, 313.0], [60.2, 313.0], [60.3, 313.0], [60.4, 313.0], [60.5, 313.0], [60.6, 313.0], [60.7, 313.0], [60.8, 313.0], [60.9, 313.0], [61.0, 313.0], [61.1, 313.0], [61.2, 313.0], [61.3, 313.0], [61.4, 313.0], [61.5, 313.0], [61.6, 313.0], [61.7, 313.0], [61.8, 313.0], [61.9, 313.0], [62.0, 313.0], [62.1, 313.0], [62.2, 313.0], [62.3, 313.0], [62.4, 313.0], [62.5, 314.0], [62.6, 314.0], [62.7, 314.0], [62.8, 314.0], [62.9, 314.0], [63.0, 314.0], [63.1, 314.0], [63.2, 314.0], [63.3, 314.0], [63.4, 314.0], [63.5, 314.0], [63.6, 314.0], [63.7, 314.0], [63.8, 314.0], [63.9, 314.0], [64.0, 314.0], [64.1, 314.0], [64.2, 314.0], [64.3, 314.0], [64.4, 314.0], [64.5, 314.0], [64.6, 314.0], [64.7, 315.0], [64.8, 315.0], [64.9, 315.0], [65.0, 315.0], [65.1, 315.0], [65.2, 315.0], [65.3, 315.0], [65.4, 315.0], [65.5, 315.0], [65.6, 315.0], [65.7, 315.0], [65.8, 315.0], [65.9, 315.0], [66.0, 315.0], [66.1, 315.0], [66.2, 315.0], [66.3, 315.0], [66.4, 315.0], [66.5, 316.0], [66.6, 316.0], [66.7, 316.0], [66.8, 316.0], [66.9, 316.0], [67.0, 316.0], [67.1, 316.0], [67.2, 316.0], [67.3, 316.0], [67.4, 316.0], [67.5, 316.0], [67.6, 316.0], [67.7, 316.0], [67.8, 316.0], [67.9, 316.0], [68.0, 316.0], [68.1, 316.0], [68.2, 316.0], [68.3, 317.0], [68.4, 317.0], [68.5, 317.0], [68.6, 317.0], [68.7, 317.0], [68.8, 317.0], [68.9, 317.0], [69.0, 317.0], [69.1, 317.0], [69.2, 317.0], [69.3, 317.0], [69.4, 317.0], [69.5, 317.0], [69.6, 317.0], [69.7, 317.0], [69.8, 317.0], [69.9, 317.0], [70.0, 317.0], [70.1, 317.0], [70.2, 317.0], [70.3, 317.0], [70.4, 318.0], [70.5, 318.0], [70.6, 318.0], [70.7, 318.0], [70.8, 318.0], [70.9, 318.0], [71.0, 318.0], [71.1, 318.0], [71.2, 318.0], [71.3, 318.0], [71.4, 319.0], [71.5, 319.0], [71.6, 319.0], [71.7, 319.0], [71.8, 319.0], [71.9, 319.0], [72.0, 319.0], [72.1, 319.0], [72.2, 319.0], [72.3, 319.0], [72.4, 319.0], [72.5, 319.0], [72.6, 319.0], [72.7, 320.0], [72.8, 320.0], [72.9, 320.0], [73.0, 320.0], [73.1, 320.0], [73.2, 320.0], [73.3, 320.0], [73.4, 320.0], [73.5, 320.0], [73.6, 320.0], [73.7, 320.0], [73.8, 320.0], [73.9, 321.0], [74.0, 321.0], [74.1, 321.0], [74.2, 321.0], [74.3, 321.0], [74.4, 321.0], [74.5, 321.0], [74.6, 321.0], [74.7, 321.0], [74.8, 321.0], [74.9, 321.0], [75.0, 321.0], [75.1, 322.0], [75.2, 322.0], [75.3, 322.0], [75.4, 322.0], [75.5, 322.0], [75.6, 322.0], [75.7, 322.0], [75.8, 322.0], [75.9, 322.0], [76.0, 322.0], [76.1, 322.0], [76.2, 322.0], [76.3, 322.0], [76.4, 322.0], [76.5, 323.0], [76.6, 323.0], [76.7, 323.0], [76.8, 323.0], [76.9, 323.0], [77.0, 323.0], [77.1, 323.0], [77.2, 324.0], [77.3, 324.0], [77.4, 324.0], [77.5, 324.0], [77.6, 324.0], [77.7, 324.0], [77.8, 324.0], [77.9, 324.0], [78.0, 324.0], [78.1, 325.0], [78.2, 325.0], [78.3, 325.0], [78.4, 325.0], [78.5, 325.0], [78.6, 325.0], [78.7, 325.0], [78.8, 326.0], [78.9, 326.0], [79.0, 326.0], [79.1, 326.0], [79.2, 326.0], [79.3, 326.0], [79.4, 326.0], [79.5, 326.0], [79.6, 326.0], [79.7, 326.0], [79.8, 326.0], [79.9, 326.0], [80.0, 327.0], [80.1, 327.0], [80.2, 327.0], [80.3, 327.0], [80.4, 327.0], [80.5, 327.0], [80.6, 327.0], [80.7, 327.0], [80.8, 327.0], [80.9, 327.0], [81.0, 328.0], [81.1, 328.0], [81.2, 328.0], [81.3, 328.0], [81.4, 328.0], [81.5, 328.0], [81.6, 328.0], [81.7, 328.0], [81.8, 329.0], [81.9, 329.0], [82.0, 329.0], [82.1, 329.0], [82.2, 329.0], [82.3, 329.0], [82.4, 329.0], [82.5, 329.0], [82.6, 330.0], [82.7, 330.0], [82.8, 330.0], [82.9, 330.0], [83.0, 330.0], [83.1, 330.0], [83.2, 330.0], [83.3, 330.0], [83.4, 330.0], [83.5, 331.0], [83.6, 331.0], [83.7, 331.0], [83.8, 331.0], [83.9, 331.0], [84.0, 331.0], [84.1, 331.0], [84.2, 331.0], [84.3, 331.0], [84.4, 332.0], [84.5, 332.0], [84.6, 332.0], [84.7, 332.0], [84.8, 332.0], [84.9, 332.0], [85.0, 333.0], [85.1, 333.0], [85.2, 333.0], [85.3, 333.0], [85.4, 333.0], [85.5, 333.0], [85.6, 333.0], [85.7, 333.0], [85.8, 333.0], [85.9, 333.0], [86.0, 333.0], [86.1, 334.0], [86.2, 334.0], [86.3, 334.0], [86.4, 334.0], [86.5, 334.0], [86.6, 334.0], [86.7, 335.0], [86.8, 335.0], [86.9, 335.0], [87.0, 335.0], [87.1, 336.0], [87.2, 336.0], [87.3, 336.0], [87.4, 336.0], [87.5, 337.0], [87.6, 337.0], [87.7, 337.0], [87.8, 337.0], [87.9, 337.0], [88.0, 337.0], [88.1, 338.0], [88.2, 338.0], [88.3, 338.0], [88.4, 338.0], [88.5, 338.0], [88.6, 339.0], [88.7, 339.0], [88.8, 339.0], [88.9, 340.0], [89.0, 340.0], [89.1, 340.0], [89.2, 340.0], [89.3, 340.0], [89.4, 340.0], [89.5, 341.0], [89.6, 341.0], [89.7, 341.0], [89.8, 341.0], [89.9, 341.0], [90.0, 342.0], [90.1, 342.0], [90.2, 342.0], [90.3, 342.0], [90.4, 343.0], [90.5, 343.0], [90.6, 343.0], [90.7, 343.0], [90.8, 343.0], [90.9, 343.0], [91.0, 344.0], [91.1, 344.0], [91.2, 344.0], [91.3, 344.0], [91.4, 345.0], [91.5, 345.0], [91.6, 345.0], [91.7, 345.0], [91.8, 346.0], [91.9, 346.0], [92.0, 346.0], [92.1, 347.0], [92.2, 347.0], [92.3, 347.0], [92.4, 348.0], [92.5, 348.0], [92.6, 348.0], [92.7, 349.0], [92.8, 349.0], [92.9, 349.0], [93.0, 350.0], [93.1, 350.0], [93.2, 350.0], [93.3, 350.0], [93.4, 351.0], [93.5, 351.0], [93.6, 351.0], [93.7, 351.0], [93.8, 352.0], [93.9, 352.0], [94.0, 353.0], [94.1, 353.0], [94.2, 353.0], [94.3, 354.0], [94.4, 354.0], [94.5, 659.0], [94.6, 767.0], [94.7, 826.0], [94.8, 852.0], [94.9, 945.0], [95.0, 947.0], [95.1, 955.0], [95.2, 957.0], [95.3, 957.0], [95.4, 959.0], [95.5, 962.0], [95.6, 963.0], [95.7, 971.0], [95.8, 975.0], [95.9, 977.0], [96.0, 984.0], [96.1, 993.0], [96.2, 993.0], [96.3, 999.0], [96.4, 1013.0], [96.5, 1014.0], [96.6, 1033.0], [96.7, 1047.0], [96.8, 1071.0], [96.9, 1097.0], [97.0, 1108.0], [97.1, 1113.0], [97.2, 1117.0], [97.3, 1123.0], [97.4, 1123.0], [97.5, 1124.0], [97.6, 1135.0], [97.7, 1135.0], [97.8, 1137.0], [97.9, 1139.0], [98.0, 1141.0], [98.1, 1142.0], [98.2, 1152.0], [98.3, 1156.0], [98.4, 1158.0], [98.5, 1163.0], [98.6, 1167.0], [98.7, 1173.0], [98.8, 1181.0], [98.9, 1184.0], [99.0, 1187.0], [99.1, 1193.0], [99.2, 1193.0], [99.3, 1210.0], [99.4, 1228.0], [99.5, 1267.0], [99.6, 1951.0], [99.7, 3333.0], [99.8, 3428.0], [99.9, 6310.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[0.0, 1050.0], [0.1, 1050.0], [0.2, 1051.0], [0.3, 1052.0], [0.4, 1053.0], [0.5, 1054.0], [0.6, 1054.0], [0.7, 1054.0], [0.8, 1054.0], [0.9, 1055.0], [1.0, 1055.0], [1.1, 1055.0], [1.2, 1055.0], [1.3, 1056.0], [1.4, 1056.0], [1.5, 1057.0], [1.6, 1057.0], [1.7, 1058.0], [1.8, 1058.0], [1.9, 1058.0], [2.0, 1058.0], [2.1, 1059.0], [2.2, 1059.0], [2.3, 1059.0], [2.4, 1059.0], [2.5, 1059.0], [2.6, 1060.0], [2.7, 1060.0], [2.8, 1060.0], [2.9, 1060.0], [3.0, 1060.0], [3.1, 1061.0], [3.2, 1061.0], [3.3, 1061.0], [3.4, 1061.0], [3.5, 1061.0], [3.6, 1061.0], [3.7, 1061.0], [3.8, 1062.0], [3.9, 1062.0], [4.0, 1062.0], [4.1, 1062.0], [4.2, 1062.0], [4.3, 1062.0], [4.4, 1062.0], [4.5, 1062.0], [4.6, 1063.0], [4.7, 1063.0], [4.8, 1063.0], [4.9, 1063.0], [5.0, 1063.0], [5.1, 1064.0], [5.2, 1064.0], [5.3, 1064.0], [5.4, 1064.0], [5.5, 1064.0], [5.6, 1065.0], [5.7, 1065.0], [5.8, 1065.0], [5.9, 1065.0], [6.0, 1065.0], [6.1, 1065.0], [6.2, 1065.0], [6.3, 1066.0], [6.4, 1066.0], [6.5, 1066.0], [6.6, 1066.0], [6.7, 1067.0], [6.8, 1067.0], [6.9, 1067.0], [7.0, 1068.0], [7.1, 1068.0], [7.2, 1068.0], [7.3, 1068.0], [7.4, 1069.0], [7.5, 1069.0], [7.6, 1069.0], [7.7, 1069.0], [7.8, 1069.0], [7.9, 1070.0], [8.0, 1070.0], [8.1, 1070.0], [8.2, 1070.0], [8.3, 1071.0], [8.4, 1071.0], [8.5, 1071.0], [8.6, 1071.0], [8.7, 1071.0], [8.8, 1072.0], [8.9, 1072.0], [9.0, 1072.0], [9.1, 1072.0], [9.2, 1073.0], [9.3, 1073.0], [9.4, 1073.0], [9.5, 1074.0], [9.6, 1074.0], [9.7, 1074.0], [9.8, 1075.0], [9.9, 1075.0], [10.0, 1076.0], [10.1, 1076.0], [10.2, 1076.0], [10.3, 1077.0], [10.4, 1078.0], [10.5, 1078.0], [10.6, 1078.0], [10.7, 1079.0], [10.8, 1079.0], [10.9, 1079.0], [11.0, 1080.0], [11.1, 1080.0], [11.2, 1080.0], [11.3, 1081.0], [11.4, 1081.0], [11.5, 1081.0], [11.6, 1082.0], [11.7, 1082.0], [11.8, 1083.0], [11.9, 1083.0], [12.0, 1083.0], [12.1, 1084.0], [12.2, 1085.0], [12.3, 1086.0], [12.4, 1086.0], [12.5, 1087.0], [12.6, 1087.0], [12.7, 1088.0], [12.8, 1088.0], [12.9, 1089.0], [13.0, 1090.0], [13.1, 1090.0], [13.2, 1091.0], [13.3, 1092.0], [13.4, 1093.0], [13.5, 1094.0], [13.6, 1094.0], [13.7, 1097.0], [13.8, 1098.0], [13.9, 1098.0], [14.0, 1099.0], [14.1, 1100.0], [14.2, 1100.0], [14.3, 1102.0], [14.4, 1102.0], [14.5, 1102.0], [14.6, 1104.0], [14.7, 1104.0], [14.8, 1105.0], [14.9, 1105.0], [15.0, 1105.0], [15.1, 1106.0], [15.2, 1106.0], [15.3, 1106.0], [15.4, 1108.0], [15.5, 1111.0], [15.6, 1111.0], [15.7, 1113.0], [15.8, 1113.0], [15.9, 1113.0], [16.0, 1114.0], [16.1, 1115.0], [16.2, 1116.0], [16.3, 1116.0], [16.4, 1117.0], [16.5, 1117.0], [16.6, 1118.0], [16.7, 1120.0], [16.8, 1121.0], [16.9, 1123.0], [17.0, 1124.0], [17.1, 1124.0], [17.2, 1125.0], [17.3, 1127.0], [17.4, 1128.0], [17.5, 1130.0], [17.6, 1131.0], [17.7, 1131.0], [17.8, 1132.0], [17.9, 1133.0], [18.0, 1133.0], [18.1, 1135.0], [18.2, 1136.0], [18.3, 1137.0], [18.4, 1138.0], [18.5, 1139.0], [18.6, 1140.0], [18.7, 1141.0], [18.8, 1141.0], [18.9, 1143.0], [19.0, 1144.0], [19.1, 1144.0], [19.2, 1145.0], [19.3, 1145.0], [19.4, 1145.0], [19.5, 1145.0], [19.6, 1147.0], [19.7, 1147.0], [19.8, 1147.0], [19.9, 1149.0], [20.0, 1149.0], [20.1, 1150.0], [20.2, 1150.0], [20.3, 1151.0], [20.4, 1152.0], [20.5, 1156.0], [20.6, 1158.0], [20.7, 1158.0], [20.8, 1159.0], [20.9, 1159.0], [21.0, 1160.0], [21.1, 1164.0], [21.2, 1165.0], [21.3, 1165.0], [21.4, 1169.0], [21.5, 1171.0], [21.6, 1173.0], [21.7, 1176.0], [21.8, 1181.0], [21.9, 1183.0], [22.0, 1183.0], [22.1, 1183.0], [22.2, 1184.0], [22.3, 1184.0], [22.4, 1187.0], [22.5, 1188.0], [22.6, 1190.0], [22.7, 1193.0], [22.8, 1198.0], [22.9, 1202.0], [23.0, 1203.0], [23.1, 1205.0], [23.2, 1207.0], [23.3, 1209.0], [23.4, 1210.0], [23.5, 1211.0], [23.6, 1211.0], [23.7, 1212.0], [23.8, 1214.0], [23.9, 1216.0], [24.0, 1216.0], [24.1, 1217.0], [24.2, 1217.0], [24.3, 1217.0], [24.4, 1218.0], [24.5, 1219.0], [24.6, 1219.0], [24.7, 1220.0], [24.8, 1220.0], [24.9, 1221.0], [25.0, 1221.0], [25.1, 1221.0], [25.2, 1221.0], [25.3, 1221.0], [25.4, 1221.0], [25.5, 1222.0], [25.6, 1222.0], [25.7, 1223.0], [25.8, 1224.0], [25.9, 1224.0], [26.0, 1225.0], [26.1, 1225.0], [26.2, 1226.0], [26.3, 1226.0], [26.4, 1227.0], [26.5, 1228.0], [26.6, 1228.0], [26.7, 1229.0], [26.8, 1229.0], [26.9, 1229.0], [27.0, 1229.0], [27.1, 1231.0], [27.2, 1231.0], [27.3, 1232.0], [27.4, 1233.0], [27.5, 1233.0], [27.6, 1233.0], [27.7, 1233.0], [27.8, 1234.0], [27.9, 1234.0], [28.0, 1235.0], [28.1, 1235.0], [28.2, 1236.0], [28.3, 1236.0], [28.4, 1236.0], [28.5, 1236.0], [28.6, 1236.0], [28.7, 1237.0], [28.8, 1237.0], [28.9, 1237.0], [29.0, 1237.0], [29.1, 1238.0], [29.2, 1238.0], [29.3, 1238.0], [29.4, 1238.0], [29.5, 1239.0], [29.6, 1239.0], [29.7, 1239.0], [29.8, 1239.0], [29.9, 1240.0], [30.0, 1240.0], [30.1, 1240.0], [30.2, 1240.0], [30.3, 1240.0], [30.4, 1240.0], [30.5, 1240.0], [30.6, 1241.0], [30.7, 1241.0], [30.8, 1242.0], [30.9, 1242.0], [31.0, 1242.0], [31.1, 1242.0], [31.2, 1242.0], [31.3, 1242.0], [31.4, 1243.0], [31.5, 1243.0], [31.6, 1243.0], [31.7, 1243.0], [31.8, 1243.0], [31.9, 1243.0], [32.0, 1244.0], [32.1, 1244.0], [32.2, 1244.0], [32.3, 1244.0], [32.4, 1244.0], [32.5, 1244.0], [32.6, 1245.0], [32.7, 1245.0], [32.8, 1245.0], [32.9, 1245.0], [33.0, 1245.0], [33.1, 1245.0], [33.2, 1246.0], [33.3, 1246.0], [33.4, 1246.0], [33.5, 1246.0], [33.6, 1246.0], [33.7, 1246.0], [33.8, 1247.0], [33.9, 1247.0], [34.0, 1247.0], [34.1, 1247.0], [34.2, 1247.0], [34.3, 1248.0], [34.4, 1248.0], [34.5, 1248.0], [34.6, 1248.0], [34.7, 1249.0], [34.8, 1249.0], [34.9, 1249.0], [35.0, 1249.0], [35.1, 1249.0], [35.2, 1249.0], [35.3, 1249.0], [35.4, 1250.0], [35.5, 1250.0], [35.6, 1250.0], [35.7, 1250.0], [35.8, 1250.0], [35.9, 1250.0], [36.0, 1250.0], [36.1, 1250.0], [36.2, 1251.0], [36.3, 1251.0], [36.4, 1251.0], [36.5, 1251.0], [36.6, 1252.0], [36.7, 1252.0], [36.8, 1252.0], [36.9, 1252.0], [37.0, 1253.0], [37.1, 1253.0], [37.2, 1253.0], [37.3, 1253.0], [37.4, 1254.0], [37.5, 1254.0], [37.6, 1254.0], [37.7, 1254.0], [37.8, 1254.0], [37.9, 1254.0], [38.0, 1255.0], [38.1, 1255.0], [38.2, 1256.0], [38.3, 1256.0], [38.4, 1256.0], [38.5, 1256.0], [38.6, 1256.0], [38.7, 1256.0], [38.8, 1256.0], [38.9, 1256.0], [39.0, 1256.0], [39.1, 1257.0], [39.2, 1257.0], [39.3, 1257.0], [39.4, 1258.0], [39.5, 1258.0], [39.6, 1258.0], [39.7, 1259.0], [39.8, 1259.0], [39.9, 1259.0], [40.0, 1260.0], [40.1, 1260.0], [40.2, 1260.0], [40.3, 1260.0], [40.4, 1261.0], [40.5, 1261.0], [40.6, 1261.0], [40.7, 1262.0], [40.8, 1262.0], [40.9, 1262.0], [41.0, 1262.0], [41.1, 1262.0], [41.2, 1263.0], [41.3, 1263.0], [41.4, 1263.0], [41.5, 1264.0], [41.6, 1264.0], [41.7, 1264.0], [41.8, 1265.0], [41.9, 1265.0], [42.0, 1266.0], [42.1, 1266.0], [42.2, 1267.0], [42.3, 1267.0], [42.4, 1267.0], [42.5, 1267.0], [42.6, 1267.0], [42.7, 1268.0], [42.8, 1268.0], [42.9, 1268.0], [43.0, 1269.0], [43.1, 1269.0], [43.2, 1269.0], [43.3, 1270.0], [43.4, 1270.0], [43.5, 1270.0], [43.6, 1270.0], [43.7, 1271.0], [43.8, 1271.0], [43.9, 1272.0], [44.0, 1272.0], [44.1, 1272.0], [44.2, 1272.0], [44.3, 1273.0], [44.4, 1273.0], [44.5, 1273.0], [44.6, 1273.0], [44.7, 1273.0], [44.8, 1274.0], [44.9, 1274.0], [45.0, 1275.0], [45.1, 1275.0], [45.2, 1275.0], [45.3, 1275.0], [45.4, 1275.0], [45.5, 1276.0], [45.6, 1276.0], [45.7, 1276.0], [45.8, 1277.0], [45.9, 1277.0], [46.0, 1278.0], [46.1, 1278.0], [46.2, 1278.0], [46.3, 1278.0], [46.4, 1278.0], [46.5, 1278.0], [46.6, 1279.0], [46.7, 1279.0], [46.8, 1279.0], [46.9, 1280.0], [47.0, 1280.0], [47.1, 1281.0], [47.2, 1281.0], [47.3, 1281.0], [47.4, 1281.0], [47.5, 1282.0], [47.6, 1283.0], [47.7, 1283.0], [47.8, 1283.0], [47.9, 1284.0], [48.0, 1284.0], [48.1, 1284.0], [48.2, 1285.0], [48.3, 1285.0], [48.4, 1286.0], [48.5, 1286.0], [48.6, 1287.0], [48.7, 1287.0], [48.8, 1289.0], [48.9, 1289.0], [49.0, 1289.0], [49.1, 1290.0], [49.2, 1290.0], [49.3, 1291.0], [49.4, 1291.0], [49.5, 1292.0], [49.6, 1293.0], [49.7, 1294.0], [49.8, 1294.0], [49.9, 1294.0], [50.0, 1295.0], [50.1, 1295.0], [50.2, 1295.0], [50.3, 1296.0], [50.4, 1296.0], [50.5, 1297.0], [50.6, 1297.0], [50.7, 1298.0], [50.8, 1299.0], [50.9, 1299.0], [51.0, 1299.0], [51.1, 1300.0], [51.2, 1301.0], [51.3, 1303.0], [51.4, 1303.0], [51.5, 1303.0], [51.6, 1304.0], [51.7, 1305.0], [51.8, 1305.0], [51.9, 1306.0], [52.0, 1306.0], [52.1, 1306.0], [52.2, 1307.0], [52.3, 1307.0], [52.4, 1307.0], [52.5, 1308.0], [52.6, 1309.0], [52.7, 1309.0], [52.8, 1309.0], [52.9, 1310.0], [53.0, 1310.0], [53.1, 1310.0], [53.2, 1311.0], [53.3, 1311.0], [53.4, 1313.0], [53.5, 1313.0], [53.6, 1313.0], [53.7, 1314.0], [53.8, 1314.0], [53.9, 1316.0], [54.0, 1316.0], [54.1, 1317.0], [54.2, 1317.0], [54.3, 1318.0], [54.4, 1319.0], [54.5, 1319.0], [54.6, 1319.0], [54.7, 1320.0], [54.8, 1320.0], [54.9, 1321.0], [55.0, 1322.0], [55.1, 1322.0], [55.2, 1322.0], [55.3, 1323.0], [55.4, 1323.0], [55.5, 1323.0], [55.6, 1324.0], [55.7, 1324.0], [55.8, 1324.0], [55.9, 1325.0], [56.0, 1325.0], [56.1, 1326.0], [56.2, 1327.0], [56.3, 1327.0], [56.4, 1328.0], [56.5, 1328.0], [56.6, 1328.0], [56.7, 1328.0], [56.8, 1329.0], [56.9, 1329.0], [57.0, 1329.0], [57.1, 1330.0], [57.2, 1330.0], [57.3, 1331.0], [57.4, 1332.0], [57.5, 1332.0], [57.6, 1333.0], [57.7, 1333.0], [57.8, 1333.0], [57.9, 1333.0], [58.0, 1334.0], [58.1, 1334.0], [58.2, 1334.0], [58.3, 1335.0], [58.4, 1335.0], [58.5, 1336.0], [58.6, 1336.0], [58.7, 1336.0], [58.8, 1339.0], [58.9, 1339.0], [59.0, 1339.0], [59.1, 1339.0], [59.2, 1340.0], [59.3, 1340.0], [59.4, 1340.0], [59.5, 1343.0], [59.6, 1343.0], [59.7, 1344.0], [59.8, 1345.0], [59.9, 1345.0], [60.0, 1345.0], [60.1, 1346.0], [60.2, 1346.0], [60.3, 1346.0], [60.4, 1347.0], [60.5, 1347.0], [60.6, 1348.0], [60.7, 1350.0], [60.8, 1350.0], [60.9, 1351.0], [61.0, 1351.0], [61.1, 1351.0], [61.2, 1353.0], [61.3, 1353.0], [61.4, 1354.0], [61.5, 1354.0], [61.6, 1355.0], [61.7, 1356.0], [61.8, 1357.0], [61.9, 1358.0], [62.0, 1358.0], [62.1, 1359.0], [62.2, 1360.0], [62.3, 1360.0], [62.4, 1360.0], [62.5, 1361.0], [62.6, 1361.0], [62.7, 1361.0], [62.8, 1362.0], [62.9, 1362.0], [63.0, 1365.0], [63.1, 1369.0], [63.2, 1369.0], [63.3, 1371.0], [63.4, 1374.0], [63.5, 1374.0], [63.6, 1375.0], [63.7, 1379.0], [63.8, 1379.0], [63.9, 1380.0], [64.0, 1385.0], [64.1, 1385.0], [64.2, 1387.0], [64.3, 1389.0], [64.4, 1389.0], [64.5, 1390.0], [64.6, 1391.0], [64.7, 1391.0], [64.8, 1392.0], [64.9, 1393.0], [65.0, 1393.0], [65.1, 1394.0], [65.2, 1395.0], [65.3, 1397.0], [65.4, 1401.0], [65.5, 1402.0], [65.6, 1403.0], [65.7, 1406.0], [65.8, 1408.0], [65.9, 1408.0], [66.0, 1411.0], [66.1, 1417.0], [66.2, 1427.0], [66.3, 1440.0], [66.4, 1441.0], [66.5, 1446.0], [66.6, 1448.0], [66.7, 1462.0], [66.8, 1463.0], [66.9, 1475.0], [67.0, 1487.0], [67.1, 1489.0], [67.2, 1502.0], [67.3, 1503.0], [67.4, 1504.0], [67.5, 1514.0], [67.6, 1520.0], [67.7, 1522.0], [67.8, 1525.0], [67.9, 1532.0], [68.0, 1535.0], [68.1, 1541.0], [68.2, 1544.0], [68.3, 1546.0], [68.4, 1549.0], [68.5, 1552.0], [68.6, 1553.0], [68.7, 1555.0], [68.8, 1555.0], [68.9, 1556.0], [69.0, 1557.0], [69.1, 1559.0], [69.2, 1559.0], [69.3, 1560.0], [69.4, 1565.0], [69.5, 1565.0], [69.6, 1566.0], [69.7, 1569.0], [69.8, 1569.0], [69.9, 1574.0], [70.0, 1577.0], [70.1, 1578.0], [70.2, 1582.0], [70.3, 1584.0], [70.4, 1586.0], [70.5, 1590.0], [70.6, 1591.0], [70.7, 1591.0], [70.8, 1596.0], [70.9, 1600.0], [71.0, 1600.0], [71.1, 1608.0], [71.2, 1609.0], [71.3, 1612.0], [71.4, 1618.0], [71.5, 1622.0], [71.6, 1622.0], [71.7, 1624.0], [71.8, 1627.0], [71.9, 1627.0], [72.0, 1628.0], [72.1, 1629.0], [72.2, 1630.0], [72.3, 1630.0], [72.4, 1632.0], [72.5, 1634.0], [72.6, 1637.0], [72.7, 1637.0], [72.8, 1638.0], [72.9, 1640.0], [73.0, 1642.0], [73.1, 1643.0], [73.2, 1644.0], [73.3, 1645.0], [73.4, 1645.0], [73.5, 1647.0], [73.6, 1648.0], [73.7, 1649.0], [73.8, 1651.0], [73.9, 1651.0], [74.0, 1653.0], [74.1, 1654.0], [74.2, 1658.0], [74.3, 1658.0], [74.4, 1658.0], [74.5, 1661.0], [74.6, 1661.0], [74.7, 1664.0], [74.8, 1666.0], [74.9, 1669.0], [75.0, 1671.0], [75.1, 1672.0], [75.2, 1676.0], [75.3, 1676.0], [75.4, 1679.0], [75.5, 1679.0], [75.6, 1682.0], [75.7, 1687.0], [75.8, 1688.0], [75.9, 1693.0], [76.0, 1698.0], [76.1, 1703.0], [76.2, 1705.0], [76.3, 1710.0], [76.4, 1711.0], [76.5, 1714.0], [76.6, 1718.0], [76.7, 1719.0], [76.8, 1723.0], [76.9, 1727.0], [77.0, 1732.0], [77.1, 1742.0], [77.2, 1744.0], [77.3, 1747.0], [77.4, 1748.0], [77.5, 1748.0], [77.6, 1749.0], [77.7, 1750.0], [77.8, 1750.0], [77.9, 1756.0], [78.0, 1762.0], [78.1, 1764.0], [78.2, 1769.0], [78.3, 1770.0], [78.4, 1788.0], [78.5, 1793.0], [78.6, 1801.0], [78.7, 1808.0], [78.8, 1810.0], [78.9, 1813.0], [79.0, 1817.0], [79.1, 1821.0], [79.2, 1830.0], [79.3, 1848.0], [79.4, 1852.0], [79.5, 1858.0], [79.6, 1862.0], [79.7, 1864.0], [79.8, 1871.0], [79.9, 1885.0], [80.0, 1885.0], [80.1, 1893.0], [80.2, 1899.0], [80.3, 1900.0], [80.4, 1911.0], [80.5, 1918.0], [80.6, 1920.0], [80.7, 1930.0], [80.8, 1949.0], [80.9, 1950.0], [81.0, 1956.0], [81.1, 1963.0], [81.2, 1964.0], [81.3, 1967.0], [81.4, 1970.0], [81.5, 1971.0], [81.6, 1981.0], [81.7, 1998.0], [81.8, 2002.0], [81.9, 2004.0], [82.0, 2007.0], [82.1, 2015.0], [82.2, 2027.0], [82.3, 2031.0], [82.4, 2038.0], [82.5, 2049.0], [82.6, 2054.0], [82.7, 2060.0], [82.8, 2063.0], [82.9, 2072.0], [83.0, 2074.0], [83.1, 2077.0], [83.2, 2079.0], [83.3, 2081.0], [83.4, 2081.0], [83.5, 2089.0], [83.6, 2092.0], [83.7, 2098.0], [83.8, 2107.0], [83.9, 2107.0], [84.0, 2109.0], [84.1, 2112.0], [84.2, 2116.0], [84.3, 2116.0], [84.4, 2119.0], [84.5, 2125.0], [84.6, 2130.0], [84.7, 2133.0], [84.8, 2134.0], [84.9, 2140.0], [85.0, 2147.0], [85.1, 2148.0], [85.2, 2156.0], [85.3, 2163.0], [85.4, 2164.0], [85.5, 2167.0], [85.6, 2169.0], [85.7, 2171.0], [85.8, 2173.0], [85.9, 2183.0], [86.0, 2187.0], [86.1, 2189.0], [86.2, 2196.0], [86.3, 2199.0], [86.4, 2202.0], [86.5, 2206.0], [86.6, 2215.0], [86.7, 2216.0], [86.8, 2217.0], [86.9, 2219.0], [87.0, 2227.0], [87.1, 2231.0], [87.2, 2236.0], [87.3, 2244.0], [87.4, 2245.0], [87.5, 2245.0], [87.6, 2248.0], [87.7, 2250.0], [87.8, 2252.0], [87.9, 2262.0], [88.0, 2278.0], [88.1, 2279.0], [88.2, 2293.0], [88.3, 2294.0], [88.4, 2303.0], [88.5, 2313.0], [88.6, 2314.0], [88.7, 2320.0], [88.8, 2332.0], [88.9, 2349.0], [89.0, 2353.0], [89.1, 2355.0], [89.2, 2380.0], [89.3, 2389.0], [89.4, 2399.0], [89.5, 2406.0], [89.6, 2411.0], [89.7, 2417.0], [89.8, 2420.0], [89.9, 2420.0], [90.0, 2427.0], [90.1, 2438.0], [90.2, 2446.0], [90.3, 2446.0], [90.4, 2449.0], [90.5, 2449.0], [90.6, 2451.0], [90.7, 2454.0], [90.8, 2454.0], [90.9, 2456.0], [91.0, 2459.0], [91.1, 2459.0], [91.2, 2461.0], [91.3, 2463.0], [91.4, 2465.0], [91.5, 2465.0], [91.6, 2476.0], [91.7, 2484.0], [91.8, 2487.0], [91.9, 2495.0], [92.0, 2495.0], [92.1, 2507.0], [92.2, 2516.0], [92.3, 2517.0], [92.4, 2527.0], [92.5, 2544.0], [92.6, 2551.0], [92.7, 2552.0], [92.8, 2562.0], [92.9, 2571.0], [93.0, 2572.0], [93.1, 2579.0], [93.2, 2585.0], [93.3, 2591.0], [93.4, 2596.0], [93.5, 2602.0], [93.6, 2609.0], [93.7, 2610.0], [93.8, 2624.0], [93.9, 2631.0], [94.0, 2635.0], [94.1, 2635.0], [94.2, 2650.0], [94.3, 2657.0], [94.4, 2675.0], [94.5, 2685.0], [94.6, 2693.0], [94.7, 2709.0], [94.8, 2722.0], [94.9, 2750.0], [95.0, 2752.0], [95.1, 2783.0], [95.2, 2800.0], [95.3, 2802.0], [95.4, 2837.0], [95.5, 2848.0], [95.6, 2850.0], [95.7, 2877.0], [95.8, 2884.0], [95.9, 2893.0], [96.0, 2907.0], [96.1, 2920.0], [96.2, 2931.0], [96.3, 2938.0], [96.4, 2949.0], [96.5, 2960.0], [96.6, 2996.0], [96.7, 3001.0], [96.8, 3037.0], [96.9, 3086.0], [97.0, 3098.0], [97.1, 3100.0], [97.2, 3133.0], [97.3, 3141.0], [97.4, 3254.0], [97.5, 3280.0], [97.6, 3356.0], [97.7, 3360.0], [97.8, 3384.0], [97.9, 3438.0], [98.0, 3449.0], [98.1, 3557.0], [98.2, 3693.0], [98.3, 3703.0], [98.4, 3815.0], [98.5, 3840.0], [98.6, 3893.0], [98.7, 3902.0], [98.8, 4020.0], [98.9, 4036.0], [99.0, 4091.0], [99.1, 4338.0], [99.2, 4510.0], [99.3, 4601.0], [99.4, 4932.0], [99.5, 4942.0], [99.6, 5027.0], [99.7, 5249.0], [99.8, 5254.0], [99.9, 5672.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 263.0], [0.1, 263.0], [0.2, 264.0], [0.3, 264.0], [0.4, 264.0], [0.5, 264.0], [0.6, 264.0], [0.7, 264.0], [0.8, 264.0], [0.9, 264.0], [1.0, 264.0], [1.1, 264.0], [1.2, 264.0], [1.3, 264.0], [1.4, 264.0], [1.5, 264.0], [1.6, 265.0], [1.7, 265.0], [1.8, 265.0], [1.9, 265.0], [2.0, 265.0], [2.1, 265.0], [2.2, 265.0], [2.3, 265.0], [2.4, 265.0], [2.5, 265.0], [2.6, 265.0], [2.7, 265.0], [2.8, 265.0], [2.9, 265.0], [3.0, 265.0], [3.1, 265.0], [3.2, 265.0], [3.3, 265.0], [3.4, 265.0], [3.5, 265.0], [3.6, 265.0], [3.7, 265.0], [3.8, 265.0], [3.9, 265.0], [4.0, 265.0], [4.1, 265.0], [4.2, 265.0], [4.3, 265.0], [4.4, 265.0], [4.5, 265.0], [4.6, 265.0], [4.7, 265.0], [4.8, 265.0], [4.9, 266.0], [5.0, 266.0], [5.1, 266.0], [5.2, 266.0], [5.3, 266.0], [5.4, 266.0], [5.5, 266.0], [5.6, 266.0], [5.7, 266.0], [5.8, 266.0], [5.9, 266.0], [6.0, 266.0], [6.1, 266.0], [6.2, 266.0], [6.3, 266.0], [6.4, 266.0], [6.5, 266.0], [6.6, 266.0], [6.7, 266.0], [6.8, 266.0], [6.9, 266.0], [7.0, 266.0], [7.1, 266.0], [7.2, 266.0], [7.3, 266.0], [7.4, 266.0], [7.5, 266.0], [7.6, 266.0], [7.7, 266.0], [7.8, 266.0], [7.9, 266.0], [8.0, 266.0], [8.1, 266.0], [8.2, 266.0], [8.3, 266.0], [8.4, 266.0], [8.5, 266.0], [8.6, 266.0], [8.7, 266.0], [8.8, 266.0], [8.9, 266.0], [9.0, 266.0], [9.1, 266.0], [9.2, 266.0], [9.3, 266.0], [9.4, 267.0], [9.5, 267.0], [9.6, 267.0], [9.7, 267.0], [9.8, 267.0], [9.9, 267.0], [10.0, 267.0], [10.1, 267.0], [10.2, 267.0], [10.3, 267.0], [10.4, 267.0], [10.5, 267.0], [10.6, 267.0], [10.7, 267.0], [10.8, 267.0], [10.9, 267.0], [11.0, 267.0], [11.1, 267.0], [11.2, 267.0], [11.3, 267.0], [11.4, 267.0], [11.5, 267.0], [11.6, 267.0], [11.7, 267.0], [11.8, 267.0], [11.9, 267.0], [12.0, 267.0], [12.1, 267.0], [12.2, 267.0], [12.3, 267.0], [12.4, 267.0], [12.5, 267.0], [12.6, 267.0], [12.7, 267.0], [12.8, 268.0], [12.9, 268.0], [13.0, 268.0], [13.1, 268.0], [13.2, 268.0], [13.3, 268.0], [13.4, 268.0], [13.5, 268.0], [13.6, 268.0], [13.7, 268.0], [13.8, 268.0], [13.9, 268.0], [14.0, 268.0], [14.1, 268.0], [14.2, 268.0], [14.3, 268.0], [14.4, 268.0], [14.5, 268.0], [14.6, 269.0], [14.7, 269.0], [14.8, 269.0], [14.9, 269.0], [15.0, 269.0], [15.1, 269.0], [15.2, 269.0], [15.3, 269.0], [15.4, 269.0], [15.5, 269.0], [15.6, 269.0], [15.7, 269.0], [15.8, 269.0], [15.9, 269.0], [16.0, 270.0], [16.1, 270.0], [16.2, 270.0], [16.3, 270.0], [16.4, 270.0], [16.5, 270.0], [16.6, 270.0], [16.7, 270.0], [16.8, 270.0], [16.9, 270.0], [17.0, 271.0], [17.1, 271.0], [17.2, 271.0], [17.3, 271.0], [17.4, 271.0], [17.5, 271.0], [17.6, 272.0], [17.7, 272.0], [17.8, 272.0], [17.9, 272.0], [18.0, 272.0], [18.1, 272.0], [18.2, 272.0], [18.3, 272.0], [18.4, 272.0], [18.5, 272.0], [18.6, 272.0], [18.7, 272.0], [18.8, 272.0], [18.9, 272.0], [19.0, 273.0], [19.1, 273.0], [19.2, 273.0], [19.3, 273.0], [19.4, 273.0], [19.5, 273.0], [19.6, 273.0], [19.7, 273.0], [19.8, 273.0], [19.9, 273.0], [20.0, 274.0], [20.1, 274.0], [20.2, 274.0], [20.3, 274.0], [20.4, 274.0], [20.5, 274.0], [20.6, 274.0], [20.7, 274.0], [20.8, 274.0], [20.9, 274.0], [21.0, 274.0], [21.1, 274.0], [21.2, 275.0], [21.3, 275.0], [21.4, 275.0], [21.5, 275.0], [21.6, 275.0], [21.7, 275.0], [21.8, 275.0], [21.9, 275.0], [22.0, 276.0], [22.1, 276.0], [22.2, 276.0], [22.3, 276.0], [22.4, 276.0], [22.5, 276.0], [22.6, 277.0], [22.7, 277.0], [22.8, 277.0], [22.9, 277.0], [23.0, 277.0], [23.1, 277.0], [23.2, 277.0], [23.3, 277.0], [23.4, 277.0], [23.5, 278.0], [23.6, 278.0], [23.7, 278.0], [23.8, 278.0], [23.9, 278.0], [24.0, 278.0], [24.1, 278.0], [24.2, 279.0], [24.3, 279.0], [24.4, 279.0], [24.5, 279.0], [24.6, 279.0], [24.7, 279.0], [24.8, 280.0], [24.9, 280.0], [25.0, 280.0], [25.1, 281.0], [25.2, 281.0], [25.3, 281.0], [25.4, 281.0], [25.5, 281.0], [25.6, 281.0], [25.7, 282.0], [25.8, 282.0], [25.9, 283.0], [26.0, 283.0], [26.1, 283.0], [26.2, 283.0], [26.3, 284.0], [26.4, 284.0], [26.5, 284.0], [26.6, 284.0], [26.7, 284.0], [26.8, 284.0], [26.9, 285.0], [27.0, 285.0], [27.1, 285.0], [27.2, 285.0], [27.3, 285.0], [27.4, 285.0], [27.5, 285.0], [27.6, 286.0], [27.7, 286.0], [27.8, 286.0], [27.9, 286.0], [28.0, 286.0], [28.1, 286.0], [28.2, 286.0], [28.3, 287.0], [28.4, 287.0], [28.5, 287.0], [28.6, 288.0], [28.7, 288.0], [28.8, 288.0], [28.9, 288.0], [29.0, 288.0], [29.1, 288.0], [29.2, 288.0], [29.3, 288.0], [29.4, 288.0], [29.5, 289.0], [29.6, 289.0], [29.7, 290.0], [29.8, 290.0], [29.9, 291.0], [30.0, 291.0], [30.1, 291.0], [30.2, 293.0], [30.3, 293.0], [30.4, 293.0], [30.5, 294.0], [30.6, 294.0], [30.7, 295.0], [30.8, 295.0], [30.9, 295.0], [31.0, 296.0], [31.1, 296.0], [31.2, 297.0], [31.3, 297.0], [31.4, 298.0], [31.5, 298.0], [31.6, 299.0], [31.7, 299.0], [31.8, 299.0], [31.9, 299.0], [32.0, 300.0], [32.1, 300.0], [32.2, 300.0], [32.3, 301.0], [32.4, 301.0], [32.5, 302.0], [32.6, 302.0], [32.7, 302.0], [32.8, 302.0], [32.9, 302.0], [33.0, 302.0], [33.1, 302.0], [33.2, 302.0], [33.3, 302.0], [33.4, 303.0], [33.5, 303.0], [33.6, 303.0], [33.7, 303.0], [33.8, 303.0], [33.9, 303.0], [34.0, 303.0], [34.1, 303.0], [34.2, 303.0], [34.3, 304.0], [34.4, 304.0], [34.5, 304.0], [34.6, 304.0], [34.7, 304.0], [34.8, 304.0], [34.9, 305.0], [35.0, 305.0], [35.1, 305.0], [35.2, 305.0], [35.3, 305.0], [35.4, 305.0], [35.5, 305.0], [35.6, 305.0], [35.7, 305.0], [35.8, 306.0], [35.9, 306.0], [36.0, 306.0], [36.1, 306.0], [36.2, 306.0], [36.3, 306.0], [36.4, 306.0], [36.5, 306.0], [36.6, 306.0], [36.7, 306.0], [36.8, 307.0], [36.9, 307.0], [37.0, 307.0], [37.1, 307.0], [37.2, 307.0], [37.3, 307.0], [37.4, 307.0], [37.5, 307.0], [37.6, 307.0], [37.7, 307.0], [37.8, 307.0], [37.9, 308.0], [38.0, 308.0], [38.1, 308.0], [38.2, 308.0], [38.3, 308.0], [38.4, 308.0], [38.5, 308.0], [38.6, 308.0], [38.7, 308.0], [38.8, 308.0], [38.9, 308.0], [39.0, 308.0], [39.1, 308.0], [39.2, 308.0], [39.3, 308.0], [39.4, 308.0], [39.5, 308.0], [39.6, 308.0], [39.7, 308.0], [39.8, 309.0], [39.9, 309.0], [40.0, 309.0], [40.1, 309.0], [40.2, 309.0], [40.3, 309.0], [40.4, 309.0], [40.5, 309.0], [40.6, 309.0], [40.7, 309.0], [40.8, 309.0], [40.9, 309.0], [41.0, 309.0], [41.1, 309.0], [41.2, 309.0], [41.3, 309.0], [41.4, 309.0], [41.5, 309.0], [41.6, 309.0], [41.7, 309.0], [41.8, 310.0], [41.9, 310.0], [42.0, 310.0], [42.1, 310.0], [42.2, 310.0], [42.3, 310.0], [42.4, 310.0], [42.5, 310.0], [42.6, 310.0], [42.7, 310.0], [42.8, 310.0], [42.9, 310.0], [43.0, 310.0], [43.1, 310.0], [43.2, 310.0], [43.3, 310.0], [43.4, 310.0], [43.5, 310.0], [43.6, 310.0], [43.7, 310.0], [43.8, 310.0], [43.9, 310.0], [44.0, 310.0], [44.1, 310.0], [44.2, 310.0], [44.3, 310.0], [44.4, 310.0], [44.5, 310.0], [44.6, 310.0], [44.7, 310.0], [44.8, 310.0], [44.9, 311.0], [45.0, 311.0], [45.1, 311.0], [45.2, 311.0], [45.3, 311.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 311.0], [46.0, 311.0], [46.1, 311.0], [46.2, 311.0], [46.3, 311.0], [46.4, 311.0], [46.5, 311.0], [46.6, 311.0], [46.7, 311.0], [46.8, 311.0], [46.9, 311.0], [47.0, 311.0], [47.1, 311.0], [47.2, 311.0], [47.3, 311.0], [47.4, 311.0], [47.5, 311.0], [47.6, 311.0], [47.7, 311.0], [47.8, 311.0], [47.9, 311.0], [48.0, 311.0], [48.1, 311.0], [48.2, 311.0], [48.3, 311.0], [48.4, 311.0], [48.5, 311.0], [48.6, 311.0], [48.7, 311.0], [48.8, 311.0], [48.9, 311.0], [49.0, 312.0], [49.1, 312.0], [49.2, 312.0], [49.3, 312.0], [49.4, 312.0], [49.5, 312.0], [49.6, 312.0], [49.7, 312.0], [49.8, 312.0], [49.9, 312.0], [50.0, 312.0], [50.1, 312.0], [50.2, 312.0], [50.3, 312.0], [50.4, 312.0], [50.5, 312.0], [50.6, 312.0], [50.7, 312.0], [50.8, 312.0], [50.9, 312.0], [51.0, 312.0], [51.1, 312.0], [51.2, 312.0], [51.3, 312.0], [51.4, 312.0], [51.5, 312.0], [51.6, 312.0], [51.7, 312.0], [51.8, 312.0], [51.9, 312.0], [52.0, 312.0], [52.1, 312.0], [52.2, 312.0], [52.3, 312.0], [52.4, 312.0], [52.5, 312.0], [52.6, 312.0], [52.7, 312.0], [52.8, 312.0], [52.9, 312.0], [53.0, 312.0], [53.1, 313.0], [53.2, 313.0], [53.3, 313.0], [53.4, 313.0], [53.5, 313.0], [53.6, 313.0], [53.7, 313.0], [53.8, 313.0], [53.9, 313.0], [54.0, 313.0], [54.1, 313.0], [54.2, 313.0], [54.3, 313.0], [54.4, 313.0], [54.5, 313.0], [54.6, 313.0], [54.7, 313.0], [54.8, 313.0], [54.9, 313.0], [55.0, 313.0], [55.1, 313.0], [55.2, 313.0], [55.3, 313.0], [55.4, 313.0], [55.5, 313.0], [55.6, 313.0], [55.7, 313.0], [55.8, 313.0], [55.9, 313.0], [56.0, 313.0], [56.1, 313.0], [56.2, 313.0], [56.3, 313.0], [56.4, 313.0], [56.5, 313.0], [56.6, 313.0], [56.7, 313.0], [56.8, 313.0], [56.9, 313.0], [57.0, 313.0], [57.1, 313.0], [57.2, 313.0], [57.3, 313.0], [57.4, 313.0], [57.5, 313.0], [57.6, 314.0], [57.7, 314.0], [57.8, 314.0], [57.9, 314.0], [58.0, 314.0], [58.1, 314.0], [58.2, 314.0], [58.3, 314.0], [58.4, 314.0], [58.5, 314.0], [58.6, 314.0], [58.7, 314.0], [58.8, 314.0], [58.9, 314.0], [59.0, 314.0], [59.1, 314.0], [59.2, 314.0], [59.3, 314.0], [59.4, 314.0], [59.5, 314.0], [59.6, 314.0], [59.7, 314.0], [59.8, 314.0], [59.9, 314.0], [60.0, 314.0], [60.1, 314.0], [60.2, 314.0], [60.3, 314.0], [60.4, 314.0], [60.5, 314.0], [60.6, 314.0], [60.7, 314.0], [60.8, 314.0], [60.9, 314.0], [61.0, 314.0], [61.1, 314.0], [61.2, 314.0], [61.3, 314.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 315.0], [62.2, 315.0], [62.3, 315.0], [62.4, 315.0], [62.5, 315.0], [62.6, 315.0], [62.7, 315.0], [62.8, 315.0], [62.9, 315.0], [63.0, 315.0], [63.1, 315.0], [63.2, 315.0], [63.3, 315.0], [63.4, 315.0], [63.5, 315.0], [63.6, 315.0], [63.7, 315.0], [63.8, 315.0], [63.9, 315.0], [64.0, 315.0], [64.1, 316.0], [64.2, 316.0], [64.3, 316.0], [64.4, 316.0], [64.5, 316.0], [64.6, 316.0], [64.7, 316.0], [64.8, 316.0], [64.9, 316.0], [65.0, 316.0], [65.1, 316.0], [65.2, 316.0], [65.3, 316.0], [65.4, 316.0], [65.5, 316.0], [65.6, 316.0], [65.7, 316.0], [65.8, 316.0], [65.9, 316.0], [66.0, 316.0], [66.1, 316.0], [66.2, 317.0], [66.3, 317.0], [66.4, 317.0], [66.5, 317.0], [66.6, 317.0], [66.7, 317.0], [66.8, 317.0], [66.9, 317.0], [67.0, 317.0], [67.1, 317.0], [67.2, 317.0], [67.3, 317.0], [67.4, 317.0], [67.5, 317.0], [67.6, 317.0], [67.7, 317.0], [67.8, 317.0], [67.9, 317.0], [68.0, 317.0], [68.1, 318.0], [68.2, 318.0], [68.3, 318.0], [68.4, 318.0], [68.5, 318.0], [68.6, 318.0], [68.7, 318.0], [68.8, 318.0], [68.9, 318.0], [69.0, 318.0], [69.1, 318.0], [69.2, 318.0], [69.3, 318.0], [69.4, 319.0], [69.5, 319.0], [69.6, 319.0], [69.7, 319.0], [69.8, 319.0], [69.9, 319.0], [70.0, 319.0], [70.1, 319.0], [70.2, 319.0], [70.3, 319.0], [70.4, 319.0], [70.5, 319.0], [70.6, 319.0], [70.7, 319.0], [70.8, 320.0], [70.9, 320.0], [71.0, 320.0], [71.1, 320.0], [71.2, 320.0], [71.3, 320.0], [71.4, 320.0], [71.5, 320.0], [71.6, 320.0], [71.7, 320.0], [71.8, 320.0], [71.9, 320.0], [72.0, 320.0], [72.1, 321.0], [72.2, 321.0], [72.3, 321.0], [72.4, 321.0], [72.5, 321.0], [72.6, 321.0], [72.7, 321.0], [72.8, 321.0], [72.9, 321.0], [73.0, 321.0], [73.1, 321.0], [73.2, 321.0], [73.3, 322.0], [73.4, 322.0], [73.5, 322.0], [73.6, 322.0], [73.7, 322.0], [73.8, 322.0], [73.9, 322.0], [74.0, 322.0], [74.1, 322.0], [74.2, 322.0], [74.3, 322.0], [74.4, 322.0], [74.5, 323.0], [74.6, 323.0], [74.7, 323.0], [74.8, 323.0], [74.9, 323.0], [75.0, 323.0], [75.1, 323.0], [75.2, 323.0], [75.3, 323.0], [75.4, 323.0], [75.5, 323.0], [75.6, 324.0], [75.7, 324.0], [75.8, 324.0], [75.9, 324.0], [76.0, 324.0], [76.1, 324.0], [76.2, 324.0], [76.3, 325.0], [76.4, 325.0], [76.5, 325.0], [76.6, 325.0], [76.7, 325.0], [76.8, 325.0], [76.9, 325.0], [77.0, 325.0], [77.1, 325.0], [77.2, 325.0], [77.3, 325.0], [77.4, 325.0], [77.5, 326.0], [77.6, 326.0], [77.7, 326.0], [77.8, 326.0], [77.9, 326.0], [78.0, 326.0], [78.1, 326.0], [78.2, 326.0], [78.3, 326.0], [78.4, 327.0], [78.5, 327.0], [78.6, 327.0], [78.7, 327.0], [78.8, 327.0], [78.9, 327.0], [79.0, 327.0], [79.1, 327.0], [79.2, 327.0], [79.3, 327.0], [79.4, 328.0], [79.5, 328.0], [79.6, 328.0], [79.7, 328.0], [79.8, 328.0], [79.9, 329.0], [80.0, 329.0], [80.1, 329.0], [80.2, 329.0], [80.3, 329.0], [80.4, 330.0], [80.5, 330.0], [80.6, 330.0], [80.7, 330.0], [80.8, 330.0], [80.9, 330.0], [81.0, 330.0], [81.1, 331.0], [81.2, 331.0], [81.3, 331.0], [81.4, 331.0], [81.5, 331.0], [81.6, 331.0], [81.7, 332.0], [81.8, 332.0], [81.9, 332.0], [82.0, 332.0], [82.1, 332.0], [82.2, 332.0], [82.3, 332.0], [82.4, 332.0], [82.5, 332.0], [82.6, 333.0], [82.7, 333.0], [82.8, 333.0], [82.9, 333.0], [83.0, 333.0], [83.1, 333.0], [83.2, 333.0], [83.3, 333.0], [83.4, 334.0], [83.5, 334.0], [83.6, 334.0], [83.7, 334.0], [83.8, 334.0], [83.9, 334.0], [84.0, 334.0], [84.1, 334.0], [84.2, 334.0], [84.3, 334.0], [84.4, 335.0], [84.5, 335.0], [84.6, 335.0], [84.7, 335.0], [84.8, 335.0], [84.9, 335.0], [85.0, 336.0], [85.1, 336.0], [85.2, 336.0], [85.3, 336.0], [85.4, 336.0], [85.5, 336.0], [85.6, 337.0], [85.7, 337.0], [85.8, 337.0], [85.9, 337.0], [86.0, 337.0], [86.1, 337.0], [86.2, 337.0], [86.3, 337.0], [86.4, 337.0], [86.5, 337.0], [86.6, 337.0], [86.7, 337.0], [86.8, 337.0], [86.9, 337.0], [87.0, 338.0], [87.1, 338.0], [87.2, 338.0], [87.3, 338.0], [87.4, 338.0], [87.5, 338.0], [87.6, 338.0], [87.7, 339.0], [87.8, 339.0], [87.9, 339.0], [88.0, 339.0], [88.1, 340.0], [88.2, 340.0], [88.3, 340.0], [88.4, 340.0], [88.5, 340.0], [88.6, 340.0], [88.7, 340.0], [88.8, 341.0], [88.9, 341.0], [89.0, 341.0], [89.1, 341.0], [89.2, 341.0], [89.3, 342.0], [89.4, 342.0], [89.5, 342.0], [89.6, 342.0], [89.7, 343.0], [89.8, 344.0], [89.9, 344.0], [90.0, 344.0], [90.1, 344.0], [90.2, 344.0], [90.3, 345.0], [90.4, 345.0], [90.5, 345.0], [90.6, 345.0], [90.7, 345.0], [90.8, 345.0], [90.9, 346.0], [91.0, 346.0], [91.1, 346.0], [91.2, 346.0], [91.3, 347.0], [91.4, 347.0], [91.5, 347.0], [91.6, 347.0], [91.7, 348.0], [91.8, 348.0], [91.9, 349.0], [92.0, 349.0], [92.1, 349.0], [92.2, 350.0], [92.3, 350.0], [92.4, 350.0], [92.5, 350.0], [92.6, 350.0], [92.7, 351.0], [92.8, 351.0], [92.9, 351.0], [93.0, 351.0], [93.1, 352.0], [93.2, 352.0], [93.3, 353.0], [93.4, 353.0], [93.5, 353.0], [93.6, 354.0], [93.7, 354.0], [93.8, 354.0], [93.9, 354.0], [94.0, 355.0], [94.1, 355.0], [94.2, 359.0], [94.3, 661.0], [94.4, 682.0], [94.5, 903.0], [94.6, 904.0], [94.7, 905.0], [94.8, 917.0], [94.9, 923.0], [95.0, 923.0], [95.1, 933.0], [95.2, 935.0], [95.3, 935.0], [95.4, 939.0], [95.5, 946.0], [95.6, 948.0], [95.7, 967.0], [95.8, 983.0], [95.9, 987.0], [96.0, 1002.0], [96.1, 1027.0], [96.2, 1030.0], [96.3, 1034.0], [96.4, 1038.0], [96.5, 1042.0], [96.6, 1051.0], [96.7, 1059.0], [96.8, 1060.0], [96.9, 1069.0], [97.0, 1073.0], [97.1, 1075.0], [97.2, 1080.0], [97.3, 1081.0], [97.4, 1084.0], [97.5, 1092.0], [97.6, 1099.0], [97.7, 1100.0], [97.8, 1102.0], [97.9, 1104.0], [98.0, 1109.0], [98.1, 1110.0], [98.2, 1117.0], [98.3, 1117.0], [98.4, 1127.0], [98.5, 1131.0], [98.6, 1132.0], [98.7, 1139.0], [98.8, 1144.0], [98.9, 1145.0], [99.0, 1155.0], [99.1, 1563.0], [99.2, 1584.0], [99.3, 1836.0], [99.4, 1836.0], [99.5, 1841.0], [99.6, 2049.0], [99.7, 2275.0], [99.8, 3320.0], [99.9, 4318.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1051.0, "series": [{"data": [[600.0, 1.0], [700.0, 2.0], [3100.0, 1.0], [200.0, 523.0], [800.0, 3.0], [3300.0, 1.0], [3400.0, 1.0], [900.0, 25.0], [1000.0, 10.0], [4300.0, 1.0], [1100.0, 39.0], [300.0, 1051.0], [1200.0, 4.0], [1300.0, 1.0], [6300.0, 2.0], [1900.0, 1.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[10200.0, 1.0], [1000.0, 234.0], [1100.0, 146.0], [1200.0, 470.0], [1300.0, 239.0], [1400.0, 30.0], [1500.0, 62.0], [1600.0, 86.0], [1700.0, 41.0], [1800.0, 29.0], [1900.0, 25.0], [2000.0, 33.0], [2100.0, 43.0], [2200.0, 34.0], [2300.0, 18.0], [2400.0, 43.0], [2500.0, 24.0], [2600.0, 20.0], [2800.0, 12.0], [2700.0, 9.0], [2900.0, 13.0], [3000.0, 6.0], [3100.0, 5.0], [3200.0, 3.0], [3300.0, 6.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 2.0], [3800.0, 5.0], [3900.0, 2.0], [4000.0, 4.0], [4300.0, 2.0], [4500.0, 2.0], [4600.0, 1.0], [4800.0, 1.0], [4900.0, 3.0], [5000.0, 1.0], [5200.0, 4.0], [5600.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 3.0], [700.0, 1.0], [200.0, 533.0], [3300.0, 2.0], [900.0, 25.0], [1000.0, 28.0], [4300.0, 2.0], [1100.0, 24.0], [300.0, 1037.0], [1500.0, 2.0], [1600.0, 1.0], [1800.0, 5.0], [2000.0, 2.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3144.0, "series": [{"data": [[0.0, 3144.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1285.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 563.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.25, "minX": 1.75726092E12, "maxY": 21.43083003952569, "series": [{"data": [[1.75726134E12, 19.53359683794466], [1.75726116E12, 20.194331983805675], [1.75726146E12, 21.144869215291738], [1.75726098E12, 21.43083003952569], [1.75726128E12, 21.043999999999997], [1.7572611E12, 20.487951807228892], [1.7572614E12, 20.084337349397604], [1.75726092E12, 20.451086956521753], [1.75726122E12, 20.326693227091653], [1.75726152E12, 18.25], [1.75726104E12, 20.421782178217818]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75726152E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 280.25, "minX": 1.0, "maxY": 5251.5, "series": [{"data": [[8.0, 303.0], [9.0, 311.0], [10.0, 307.0], [12.0, 313.0], [3.0, 325.5], [13.0, 314.0], [15.0, 280.25], [16.0, 399.8666666666667], [17.0, 339.77272727272737], [18.0, 345.9876543209877], [19.0, 344.3565891472867], [20.0, 335.301136363636], [21.0, 348.17159763313623], [22.0, 363.51867219917034], [23.0, 330.00862068965523], [24.0, 380.0925925925927], [25.0, 388.95454545454544], [26.0, 1322.1666666666667], [27.0, 761.1111111111111], [28.0, 776.3076923076925], [29.0, 1821.5]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[20.459783913565378, 357.8319327731091]], "isOverall": false, "label": "Create Booking-Aggregated", "isController": false}, {"data": [[10.0, 2837.0], [12.0, 1291.5], [13.0, 1704.6666666666667], [14.0, 1279.0], [15.0, 1755.25], [16.0, 1354.5], [17.0, 1434.0], [18.0, 1511.4656084656076], [19.0, 1498.7022900763354], [20.0, 1544.4104046242783], [21.0, 1543.252976190476], [22.0, 1599.6926605504584], [23.0, 1526.4795918367345], [24.0, 1734.2105263157894], [25.0, 1519.2], [26.0, 2297.777777777778], [27.0, 2580.909090909091], [28.0, 2650.2999999999997], [30.0, 5251.5]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[20.27310924369746, 1558.4801920768286]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 308.0], [3.0, 303.0], [4.0, 1036.0], [5.0, 323.0], [6.0, 349.0], [7.0, 311.0], [8.0, 303.0], [9.0, 317.0], [10.0, 321.0], [11.0, 1033.0], [12.0, 302.0], [13.0, 311.0], [14.0, 337.0], [15.0, 321.0], [16.0, 343.4545454545455], [1.0, 311.0], [17.0, 318.5333333333334], [18.0, 333.08695652173907], [19.0, 332.1757322175733], [20.0, 344.83072100313495], [21.0, 350.22965116279084], [22.0, 359.2163120567378], [23.0, 377.91975308641986], [24.0, 323.9622641509435], [25.0, 372.1851851851851], [26.0, 372.99999999999994], [27.0, 1013.5], [28.0, 988.0], [29.0, 314.0], [30.0, 3323.5]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[20.63925570228094, 357.70168067226956]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 30.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 642.5833333333334, "minX": 1.75726092E12, "maxY": 7250.866666666667, "series": [{"data": [[1.75726134E12, 7250.866666666667], [1.75726116E12, 7065.1], [1.75726146E12, 7131.95], [1.75726098E12, 7242.166666666667], [1.75726128E12, 7150.05], [1.7572611E12, 7130.066666666667], [1.7572614E12, 7120.216666666666], [1.75726092E12, 5244.666666666667], [1.75726122E12, 7184.8], [1.75726152E12, 1788.15], [1.75726104E12, 7221.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75726134E12, 2691.15], [1.75726116E12, 2628.883333333333], [1.75726146E12, 2647.516666666667], [1.75726098E12, 2688.85], [1.75726128E12, 2653.366666666667], [1.7572611E12, 2638.7], [1.7572614E12, 2645.383333333333], [1.75726092E12, 1958.5833333333333], [1.75726122E12, 2665.766666666667], [1.75726152E12, 642.5833333333334], [1.75726104E12, 2688.8166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75726152E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 308.2098765432099, "minX": 1.75726092E12, "maxY": 1726.6666666666667, "series": [{"data": [[1.75726134E12, 337.26470588235304], [1.75726116E12, 319.3757575757575], [1.75726146E12, 473.0654761904762], [1.75726098E12, 343.93529411764706], [1.75726128E12, 383.2710843373495], [1.7572611E12, 345.3048780487805], [1.7572614E12, 320.8373493975905], [1.75726092E12, 360.9421487603306], [1.75726122E12, 363.0419161676646], [1.75726152E12, 335.2307692307693], [1.75726104E12, 336.964705882353]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75726134E12, 1383.0119760479038], [1.75726116E12, 1408.9341317365274], [1.75726146E12, 1726.6666666666667], [1.75726098E12, 1619.3878787878796], [1.75726128E12, 1681.5722891566259], [1.7572611E12, 1550.3696969696975], [1.7572614E12, 1471.8253012048197], [1.75726092E12, 1724.6564885496186], [1.75726122E12, 1588.2395209580836], [1.75726152E12, 1536.5714285714287], [1.75726104E12, 1471.4378698224846]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75726134E12, 332.95266272189366], [1.75726116E12, 308.2098765432099], [1.75726146E12, 440.6956521739128], [1.75726098E12, 366.1637426900584], [1.75726128E12, 374.7142857142856], [1.7572611E12, 341.33727810650885], [1.7572614E12, 349.50000000000017], [1.75726092E12, 343.5172413793103], [1.75726122E12, 354.58928571428544], [1.75726152E12, 358.34000000000003], [1.75726104E12, 362.4999999999999]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75726152E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 308.1975308641975, "minX": 1.75726092E12, "maxY": 1726.654761904762, "series": [{"data": [[1.75726134E12, 337.23529411764713], [1.75726116E12, 319.33333333333337], [1.75726146E12, 473.0535714285715], [1.75726098E12, 343.88823529411775], [1.75726128E12, 383.2710843373495], [1.7572611E12, 345.2926829268293], [1.7572614E12, 320.8192771084339], [1.75726092E12, 360.909090909091], [1.75726122E12, 363.02994011976057], [1.75726152E12, 335.2051282051281], [1.75726104E12, 336.93529411764706]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75726134E12, 1382.9940119760474], [1.75726116E12, 1408.9101796407192], [1.75726146E12, 1726.654761904762], [1.75726098E12, 1619.3515151515157], [1.75726128E12, 1681.5481927710855], [1.7572611E12, 1550.3515151515146], [1.7572614E12, 1471.7951807228917], [1.75726092E12, 1724.4580152671754], [1.75726122E12, 1588.2035928143719], [1.75726152E12, 1536.485714285714], [1.75726104E12, 1471.4082840236679]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75726134E12, 332.94082840236695], [1.75726116E12, 308.1975308641975], [1.75726146E12, 440.68322981366447], [1.75726098E12, 366.140350877193], [1.75726128E12, 374.7083333333332], [1.7572611E12, 341.3313609467455], [1.7572614E12, 349.4759036144577], [1.75726092E12, 343.4396551724139], [1.75726122E12, 354.58928571428544], [1.75726152E12, 358.32], [1.75726104E12, 362.48192771084325]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75726152E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75726092E12, "maxY": 1333.3855421686746, "series": [{"data": [[1.75726134E12, 0.0], [1.75726116E12, 0.0], [1.75726146E12, 0.0], [1.75726098E12, 0.0], [1.75726128E12, 0.0], [1.7572611E12, 0.0], [1.7572614E12, 0.0], [1.75726092E12, 0.0], [1.75726122E12, 0.0], [1.75726152E12, 0.0], [1.75726104E12, 0.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75726134E12, 1053.5688622754485], [1.75726116E12, 1092.9041916167666], [1.75726146E12, 1174.5059523809516], [1.75726098E12, 1239.4303030303024], [1.75726128E12, 1333.3855421686746], [1.7572611E12, 1190.884848484849], [1.7572614E12, 1136.686746987952], [1.75726092E12, 1310.8473282442749], [1.75726122E12, 1233.125748502993], [1.75726152E12, 1176.1142857142856], [1.75726104E12, 1128.5443786982244]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75726134E12, 0.0], [1.75726116E12, 0.0], [1.75726146E12, 0.0], [1.75726098E12, 0.0], [1.75726128E12, 0.0], [1.7572611E12, 0.0], [1.7572614E12, 0.0], [1.75726092E12, 0.0], [1.75726122E12, 0.0], [1.75726152E12, 0.0], [1.75726104E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75726152E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 262.0, "minX": 1.75726092E12, "maxY": 10242.0, "series": [{"data": [[1.75726134E12, 3373.0], [1.75726116E12, 4510.0], [1.75726146E12, 5254.0], [1.75726098E12, 4984.0], [1.75726128E12, 10242.0], [1.7572611E12, 4052.0], [1.7572614E12, 3893.0], [1.75726092E12, 4091.0], [1.75726122E12, 5247.0], [1.75726152E12, 2932.0], [1.75726104E12, 3138.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75726134E12, 1354.3000000000002], [1.75726116E12, 1400.0], [1.75726146E12, 1657.2], [1.75726098E12, 1647.6], [1.75726128E12, 1640.7000000000005], [1.7572611E12, 1590.1], [1.7572614E12, 1590.6000000000001], [1.75726092E12, 1964.3000000000002], [1.75726122E12, 1649.1999999999998], [1.75726152E12, 1446.5], [1.75726104E12, 1515.4000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75726134E12, 2889.8500000000004], [1.75726116E12, 2896.450000000003], [1.75726146E12, 4948.799999999998], [1.75726098E12, 3279.44], [1.75726128E12, 3887.9200000000046], [1.7572611E12, 3360.7799999999993], [1.7572614E12, 2466.449999999999], [1.75726092E12, 3696.1], [1.75726122E12, 2928.4799999999977], [1.75726152E12, 2871.5], [1.75726104E12, 2775.4399999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75726134E12, 1757.7999999999997], [1.75726116E12, 2111.5], [1.75726146E12, 2457.2], [1.75726098E12, 2159.2999999999993], [1.75726128E12, 2318.0499999999997], [1.7572611E12, 2105.1499999999996], [1.7572614E12, 1972.5499999999986], [1.75726092E12, 2551.55], [1.75726122E12, 2244.0499999999984], [1.75726152E12, 1945.25], [1.75726104E12, 2104.2999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75726134E12, 263.0], [1.75726116E12, 262.0], [1.75726146E12, 299.0], [1.75726098E12, 263.0], [1.75726128E12, 300.0], [1.7572611E12, 262.0], [1.7572614E12, 263.0], [1.75726092E12, 264.0], [1.75726122E12, 262.0], [1.75726152E12, 302.0], [1.75726104E12, 263.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75726134E12, 313.0], [1.75726116E12, 282.0], [1.75726146E12, 321.0], [1.75726098E12, 330.0], [1.75726128E12, 333.0], [1.7572611E12, 324.0], [1.7572614E12, 317.0], [1.75726092E12, 335.5], [1.75726122E12, 323.0], [1.75726152E12, 317.5], [1.75726104E12, 326.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75726152E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 312.5, "minX": 1.0, "maxY": 6325.5, "series": [{"data": [[2.0, 683.0], [8.0, 327.0], [9.0, 322.0], [10.0, 317.5], [11.0, 321.5], [3.0, 1081.5], [12.0, 319.5], [13.0, 326.5], [14.0, 320.0], [15.0, 312.5], [4.0, 343.0], [1.0, 3333.0], [16.0, 1236.0], [17.0, 317.0], [5.0, 314.5], [6.0, 326.0], [7.0, 320.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 3822.5], [17.0, 6325.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 312.5, "minX": 1.0, "maxY": 6325.5, "series": [{"data": [[2.0, 683.0], [8.0, 327.0], [9.0, 322.0], [10.0, 317.5], [11.0, 321.5], [3.0, 1081.5], [12.0, 319.5], [13.0, 326.5], [14.0, 320.0], [15.0, 312.5], [4.0, 343.0], [1.0, 3333.0], [16.0, 1236.0], [17.0, 317.0], [5.0, 314.5], [6.0, 326.0], [7.0, 320.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 3822.5], [17.0, 6325.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8833333333333333, "minX": 1.75726092E12, "maxY": 8.45, "series": [{"data": [[1.75726134E12, 8.416666666666666], [1.75726116E12, 8.25], [1.75726146E12, 8.383333333333333], [1.75726098E12, 8.4], [1.75726128E12, 8.333333333333334], [1.7572611E12, 8.283333333333333], [1.7572614E12, 8.266666666666667], [1.75726092E12, 6.233333333333333], [1.75726122E12, 8.4], [1.75726152E12, 1.8833333333333333], [1.75726104E12, 8.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75726152E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75726092E12, "maxY": 8.433333333333334, "series": [{"data": [[1.75726134E12, 8.433333333333334], [1.75726116E12, 8.233333333333333], [1.75726146E12, 8.183333333333334], [1.75726098E12, 8.433333333333334], [1.75726128E12, 8.333333333333334], [1.7572611E12, 8.3], [1.7572614E12, 8.3], [1.75726092E12, 6.133333333333334], [1.75726122E12, 8.366666666666667], [1.75726152E12, 2.066666666666667], [1.75726104E12, 8.416666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75726146E12, 0.06666666666666667]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.75726146E12, 0.03333333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75726152E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75726092E12, "maxY": 2.85, "series": [{"data": [[1.75726134E12, 2.8333333333333335], [1.75726116E12, 2.75], [1.75726146E12, 2.7666666666666666], [1.75726098E12, 2.8333333333333335], [1.75726128E12, 2.7666666666666666], [1.7572611E12, 2.7333333333333334], [1.7572614E12, 2.7666666666666666], [1.75726092E12, 2.0166666666666666], [1.75726122E12, 2.783333333333333], [1.75726152E12, 0.65], [1.75726104E12, 2.8333333333333335]], "isOverall": false, "label": "Create Booking-success", "isController": false}, {"data": [[1.75726146E12, 0.06666666666666667]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.75726146E12, 0.03333333333333333]], "isOverall": false, "label": "Create Booking-failure", "isController": false}, {"data": [[1.75726134E12, 2.783333333333333], [1.75726116E12, 2.783333333333333], [1.75726146E12, 2.8], [1.75726098E12, 2.75], [1.75726128E12, 2.7666666666666666], [1.7572611E12, 2.75], [1.7572614E12, 2.7666666666666666], [1.75726092E12, 2.183333333333333], [1.75726122E12, 2.783333333333333], [1.75726152E12, 0.5833333333333334], [1.75726104E12, 2.816666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.75726134E12, 2.816666666666667], [1.75726116E12, 2.7], [1.75726146E12, 2.6166666666666667], [1.75726098E12, 2.85], [1.75726128E12, 2.8], [1.7572611E12, 2.816666666666667], [1.7572614E12, 2.7666666666666666], [1.75726092E12, 1.9333333333333333], [1.75726122E12, 2.8], [1.75726152E12, 0.8333333333333334], [1.75726104E12, 2.7666666666666666]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75726152E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.75726092E12, "maxY": 8.433333333333334, "series": [{"data": [[1.75726134E12, 8.433333333333334], [1.75726116E12, 8.233333333333333], [1.75726146E12, 8.183333333333334], [1.75726098E12, 8.433333333333334], [1.75726128E12, 8.333333333333334], [1.7572611E12, 8.3], [1.7572614E12, 8.3], [1.75726092E12, 6.133333333333334], [1.75726122E12, 8.366666666666667], [1.75726152E12, 2.066666666666667], [1.75726104E12, 8.416666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75726146E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75726152E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

