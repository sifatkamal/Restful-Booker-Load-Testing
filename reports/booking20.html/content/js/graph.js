/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 262.0, "minX": 0.0, "maxY": 8399.0, "series": [{"data": [[0.0, 262.0], [0.1, 262.0], [0.2, 262.0], [0.3, 262.0], [0.4, 262.0], [0.5, 262.0], [0.6, 262.0], [0.7, 263.0], [0.8, 263.0], [0.9, 263.0], [1.0, 263.0], [1.1, 263.0], [1.2, 263.0], [1.3, 263.0], [1.4, 263.0], [1.5, 263.0], [1.6, 263.0], [1.7, 263.0], [1.8, 263.0], [1.9, 263.0], [2.0, 263.0], [2.1, 263.0], [2.2, 263.0], [2.3, 263.0], [2.4, 263.0], [2.5, 263.0], [2.6, 263.0], [2.7, 263.0], [2.8, 263.0], [2.9, 263.0], [3.0, 263.0], [3.1, 263.0], [3.2, 263.0], [3.3, 263.0], [3.4, 263.0], [3.5, 263.0], [3.6, 263.0], [3.7, 263.0], [3.8, 263.0], [3.9, 263.0], [4.0, 263.0], [4.1, 263.0], [4.2, 263.0], [4.3, 264.0], [4.4, 264.0], [4.5, 264.0], [4.6, 264.0], [4.7, 264.0], [4.8, 264.0], [4.9, 264.0], [5.0, 264.0], [5.1, 264.0], [5.2, 264.0], [5.3, 264.0], [5.4, 264.0], [5.5, 264.0], [5.6, 264.0], [5.7, 264.0], [5.8, 264.0], [5.9, 264.0], [6.0, 264.0], [6.1, 264.0], [6.2, 264.0], [6.3, 264.0], [6.4, 264.0], [6.5, 264.0], [6.6, 264.0], [6.7, 264.0], [6.8, 264.0], [6.9, 264.0], [7.0, 264.0], [7.1, 264.0], [7.2, 264.0], [7.3, 264.0], [7.4, 264.0], [7.5, 264.0], [7.6, 264.0], [7.7, 264.0], [7.8, 264.0], [7.9, 264.0], [8.0, 264.0], [8.1, 264.0], [8.2, 264.0], [8.3, 264.0], [8.4, 264.0], [8.5, 264.0], [8.6, 264.0], [8.7, 264.0], [8.8, 264.0], [8.9, 264.0], [9.0, 264.0], [9.1, 264.0], [9.2, 264.0], [9.3, 264.0], [9.4, 264.0], [9.5, 264.0], [9.6, 264.0], [9.7, 264.0], [9.8, 264.0], [9.9, 264.0], [10.0, 264.0], [10.1, 264.0], [10.2, 264.0], [10.3, 264.0], [10.4, 264.0], [10.5, 264.0], [10.6, 264.0], [10.7, 264.0], [10.8, 264.0], [10.9, 264.0], [11.0, 264.0], [11.1, 264.0], [11.2, 264.0], [11.3, 264.0], [11.4, 264.0], [11.5, 264.0], [11.6, 264.0], [11.7, 264.0], [11.8, 264.0], [11.9, 264.0], [12.0, 264.0], [12.1, 264.0], [12.2, 264.0], [12.3, 265.0], [12.4, 265.0], [12.5, 265.0], [12.6, 265.0], [12.7, 265.0], [12.8, 265.0], [12.9, 265.0], [13.0, 265.0], [13.1, 265.0], [13.2, 265.0], [13.3, 265.0], [13.4, 265.0], [13.5, 265.0], [13.6, 265.0], [13.7, 265.0], [13.8, 265.0], [13.9, 265.0], [14.0, 265.0], [14.1, 265.0], [14.2, 265.0], [14.3, 265.0], [14.4, 265.0], [14.5, 265.0], [14.6, 265.0], [14.7, 265.0], [14.8, 265.0], [14.9, 265.0], [15.0, 265.0], [15.1, 265.0], [15.2, 265.0], [15.3, 265.0], [15.4, 265.0], [15.5, 265.0], [15.6, 265.0], [15.7, 265.0], [15.8, 265.0], [15.9, 265.0], [16.0, 265.0], [16.1, 265.0], [16.2, 265.0], [16.3, 265.0], [16.4, 265.0], [16.5, 265.0], [16.6, 265.0], [16.7, 265.0], [16.8, 265.0], [16.9, 265.0], [17.0, 265.0], [17.1, 265.0], [17.2, 265.0], [17.3, 265.0], [17.4, 265.0], [17.5, 265.0], [17.6, 265.0], [17.7, 265.0], [17.8, 265.0], [17.9, 265.0], [18.0, 265.0], [18.1, 265.0], [18.2, 265.0], [18.3, 265.0], [18.4, 266.0], [18.5, 266.0], [18.6, 266.0], [18.7, 266.0], [18.8, 266.0], [18.9, 266.0], [19.0, 266.0], [19.1, 266.0], [19.2, 266.0], [19.3, 266.0], [19.4, 266.0], [19.5, 266.0], [19.6, 266.0], [19.7, 266.0], [19.8, 266.0], [19.9, 266.0], [20.0, 266.0], [20.1, 266.0], [20.2, 266.0], [20.3, 266.0], [20.4, 266.0], [20.5, 266.0], [20.6, 266.0], [20.7, 266.0], [20.8, 266.0], [20.9, 266.0], [21.0, 266.0], [21.1, 267.0], [21.2, 267.0], [21.3, 267.0], [21.4, 267.0], [21.5, 267.0], [21.6, 267.0], [21.7, 267.0], [21.8, 267.0], [21.9, 267.0], [22.0, 267.0], [22.1, 267.0], [22.2, 267.0], [22.3, 267.0], [22.4, 267.0], [22.5, 268.0], [22.6, 268.0], [22.7, 268.0], [22.8, 268.0], [22.9, 268.0], [23.0, 268.0], [23.1, 268.0], [23.2, 269.0], [23.3, 269.0], [23.4, 269.0], [23.5, 269.0], [23.6, 270.0], [23.7, 270.0], [23.8, 271.0], [23.9, 271.0], [24.0, 271.0], [24.1, 272.0], [24.2, 272.0], [24.3, 273.0], [24.4, 274.0], [24.5, 276.0], [24.6, 278.0], [24.7, 280.0], [24.8, 283.0], [24.9, 286.0], [25.0, 292.0], [25.1, 299.0], [25.2, 299.0], [25.3, 300.0], [25.4, 300.0], [25.5, 300.0], [25.6, 300.0], [25.7, 300.0], [25.8, 300.0], [25.9, 300.0], [26.0, 301.0], [26.1, 301.0], [26.2, 301.0], [26.3, 301.0], [26.4, 301.0], [26.5, 301.0], [26.6, 301.0], [26.7, 301.0], [26.8, 301.0], [26.9, 301.0], [27.0, 301.0], [27.1, 301.0], [27.2, 301.0], [27.3, 301.0], [27.4, 302.0], [27.5, 302.0], [27.6, 302.0], [27.7, 302.0], [27.8, 302.0], [27.9, 302.0], [28.0, 302.0], [28.1, 302.0], [28.2, 302.0], [28.3, 302.0], [28.4, 302.0], [28.5, 302.0], [28.6, 303.0], [28.7, 303.0], [28.8, 303.0], [28.9, 303.0], [29.0, 303.0], [29.1, 303.0], [29.2, 303.0], [29.3, 303.0], [29.4, 303.0], [29.5, 303.0], [29.6, 303.0], [29.7, 303.0], [29.8, 303.0], [29.9, 303.0], [30.0, 303.0], [30.1, 303.0], [30.2, 303.0], [30.3, 303.0], [30.4, 303.0], [30.5, 303.0], [30.6, 303.0], [30.7, 303.0], [30.8, 304.0], [30.9, 304.0], [31.0, 304.0], [31.1, 304.0], [31.2, 304.0], [31.3, 304.0], [31.4, 304.0], [31.5, 304.0], [31.6, 304.0], [31.7, 304.0], [31.8, 304.0], [31.9, 304.0], [32.0, 304.0], [32.1, 304.0], [32.2, 304.0], [32.3, 304.0], [32.4, 304.0], [32.5, 304.0], [32.6, 304.0], [32.7, 304.0], [32.8, 304.0], [32.9, 304.0], [33.0, 304.0], [33.1, 304.0], [33.2, 304.0], [33.3, 304.0], [33.4, 304.0], [33.5, 304.0], [33.6, 304.0], [33.7, 304.0], [33.8, 305.0], [33.9, 305.0], [34.0, 305.0], [34.1, 305.0], [34.2, 305.0], [34.3, 305.0], [34.4, 305.0], [34.5, 305.0], [34.6, 305.0], [34.7, 305.0], [34.8, 305.0], [34.9, 305.0], [35.0, 305.0], [35.1, 305.0], [35.2, 305.0], [35.3, 305.0], [35.4, 305.0], [35.5, 305.0], [35.6, 305.0], [35.7, 305.0], [35.8, 306.0], [35.9, 306.0], [36.0, 306.0], [36.1, 306.0], [36.2, 306.0], [36.3, 306.0], [36.4, 306.0], [36.5, 306.0], [36.6, 306.0], [36.7, 306.0], [36.8, 306.0], [36.9, 306.0], [37.0, 306.0], [37.1, 306.0], [37.2, 306.0], [37.3, 306.0], [37.4, 306.0], [37.5, 306.0], [37.6, 306.0], [37.7, 306.0], [37.8, 306.0], [37.9, 306.0], [38.0, 306.0], [38.1, 306.0], [38.2, 306.0], [38.3, 307.0], [38.4, 307.0], [38.5, 307.0], [38.6, 307.0], [38.7, 307.0], [38.8, 307.0], [38.9, 307.0], [39.0, 307.0], [39.1, 307.0], [39.2, 307.0], [39.3, 307.0], [39.4, 307.0], [39.5, 307.0], [39.6, 307.0], [39.7, 307.0], [39.8, 307.0], [39.9, 307.0], [40.0, 307.0], [40.1, 307.0], [40.2, 307.0], [40.3, 307.0], [40.4, 307.0], [40.5, 307.0], [40.6, 307.0], [40.7, 307.0], [40.8, 307.0], [40.9, 307.0], [41.0, 307.0], [41.1, 307.0], [41.2, 307.0], [41.3, 307.0], [41.4, 307.0], [41.5, 307.0], [41.6, 307.0], [41.7, 307.0], [41.8, 307.0], [41.9, 307.0], [42.0, 307.0], [42.1, 307.0], [42.2, 307.0], [42.3, 307.0], [42.4, 307.0], [42.5, 307.0], [42.6, 307.0], [42.7, 307.0], [42.8, 307.0], [42.9, 307.0], [43.0, 307.0], [43.1, 307.0], [43.2, 307.0], [43.3, 307.0], [43.4, 307.0], [43.5, 307.0], [43.6, 307.0], [43.7, 308.0], [43.8, 308.0], [43.9, 308.0], [44.0, 308.0], [44.1, 308.0], [44.2, 308.0], [44.3, 308.0], [44.4, 308.0], [44.5, 308.0], [44.6, 308.0], [44.7, 308.0], [44.8, 308.0], [44.9, 308.0], [45.0, 308.0], [45.1, 308.0], [45.2, 308.0], [45.3, 308.0], [45.4, 308.0], [45.5, 308.0], [45.6, 308.0], [45.7, 308.0], [45.8, 308.0], [45.9, 308.0], [46.0, 308.0], [46.1, 308.0], [46.2, 308.0], [46.3, 308.0], [46.4, 308.0], [46.5, 308.0], [46.6, 308.0], [46.7, 308.0], [46.8, 308.0], [46.9, 308.0], [47.0, 308.0], [47.1, 308.0], [47.2, 308.0], [47.3, 308.0], [47.4, 308.0], [47.5, 308.0], [47.6, 308.0], [47.7, 308.0], [47.8, 308.0], [47.9, 308.0], [48.0, 308.0], [48.1, 308.0], [48.2, 308.0], [48.3, 308.0], [48.4, 308.0], [48.5, 308.0], [48.6, 308.0], [48.7, 308.0], [48.8, 308.0], [48.9, 308.0], [49.0, 308.0], [49.1, 308.0], [49.2, 308.0], [49.3, 308.0], [49.4, 308.0], [49.5, 309.0], [49.6, 309.0], [49.7, 309.0], [49.8, 309.0], [49.9, 309.0], [50.0, 309.0], [50.1, 309.0], [50.2, 309.0], [50.3, 309.0], [50.4, 309.0], [50.5, 309.0], [50.6, 309.0], [50.7, 309.0], [50.8, 309.0], [50.9, 309.0], [51.0, 309.0], [51.1, 309.0], [51.2, 309.0], [51.3, 309.0], [51.4, 309.0], [51.5, 309.0], [51.6, 309.0], [51.7, 309.0], [51.8, 309.0], [51.9, 309.0], [52.0, 309.0], [52.1, 309.0], [52.2, 309.0], [52.3, 309.0], [52.4, 309.0], [52.5, 309.0], [52.6, 309.0], [52.7, 309.0], [52.8, 309.0], [52.9, 309.0], [53.0, 309.0], [53.1, 309.0], [53.2, 309.0], [53.3, 309.0], [53.4, 309.0], [53.5, 309.0], [53.6, 309.0], [53.7, 309.0], [53.8, 309.0], [53.9, 309.0], [54.0, 309.0], [54.1, 309.0], [54.2, 309.0], [54.3, 309.0], [54.4, 309.0], [54.5, 309.0], [54.6, 309.0], [54.7, 309.0], [54.8, 309.0], [54.9, 309.0], [55.0, 309.0], [55.1, 309.0], [55.2, 309.0], [55.3, 309.0], [55.4, 309.0], [55.5, 309.0], [55.6, 309.0], [55.7, 309.0], [55.8, 309.0], [55.9, 309.0], [56.0, 309.0], [56.1, 309.0], [56.2, 309.0], [56.3, 309.0], [56.4, 309.0], [56.5, 309.0], [56.6, 309.0], [56.7, 310.0], [56.8, 310.0], [56.9, 310.0], [57.0, 310.0], [57.1, 310.0], [57.2, 310.0], [57.3, 310.0], [57.4, 310.0], [57.5, 310.0], [57.6, 310.0], [57.7, 310.0], [57.8, 310.0], [57.9, 310.0], [58.0, 310.0], [58.1, 310.0], [58.2, 310.0], [58.3, 310.0], [58.4, 310.0], [58.5, 310.0], [58.6, 310.0], [58.7, 310.0], [58.8, 310.0], [58.9, 310.0], [59.0, 310.0], [59.1, 310.0], [59.2, 310.0], [59.3, 310.0], [59.4, 310.0], [59.5, 310.0], [59.6, 310.0], [59.7, 310.0], [59.8, 310.0], [59.9, 310.0], [60.0, 310.0], [60.1, 310.0], [60.2, 310.0], [60.3, 310.0], [60.4, 310.0], [60.5, 310.0], [60.6, 310.0], [60.7, 310.0], [60.8, 310.0], [60.9, 310.0], [61.0, 310.0], [61.1, 310.0], [61.2, 310.0], [61.3, 310.0], [61.4, 310.0], [61.5, 310.0], [61.6, 310.0], [61.7, 310.0], [61.8, 310.0], [61.9, 310.0], [62.0, 310.0], [62.1, 310.0], [62.2, 310.0], [62.3, 310.0], [62.4, 310.0], [62.5, 310.0], [62.6, 310.0], [62.7, 310.0], [62.8, 310.0], [62.9, 310.0], [63.0, 310.0], [63.1, 310.0], [63.2, 310.0], [63.3, 310.0], [63.4, 310.0], [63.5, 310.0], [63.6, 310.0], [63.7, 310.0], [63.8, 310.0], [63.9, 310.0], [64.0, 310.0], [64.1, 310.0], [64.2, 310.0], [64.3, 310.0], [64.4, 310.0], [64.5, 310.0], [64.6, 310.0], [64.7, 310.0], [64.8, 310.0], [64.9, 310.0], [65.0, 310.0], [65.1, 310.0], [65.2, 310.0], [65.3, 310.0], [65.4, 310.0], [65.5, 310.0], [65.6, 310.0], [65.7, 310.0], [65.8, 310.0], [65.9, 310.0], [66.0, 310.0], [66.1, 310.0], [66.2, 310.0], [66.3, 310.0], [66.4, 310.0], [66.5, 310.0], [66.6, 310.0], [66.7, 310.0], [66.8, 310.0], [66.9, 310.0], [67.0, 310.0], [67.1, 310.0], [67.2, 310.0], [67.3, 310.0], [67.4, 310.0], [67.5, 310.0], [67.6, 310.0], [67.7, 310.0], [67.8, 310.0], [67.9, 310.0], [68.0, 310.0], [68.1, 310.0], [68.2, 310.0], [68.3, 310.0], [68.4, 310.0], [68.5, 310.0], [68.6, 310.0], [68.7, 310.0], [68.8, 310.0], [68.9, 310.0], [69.0, 310.0], [69.1, 310.0], [69.2, 310.0], [69.3, 310.0], [69.4, 310.0], [69.5, 310.0], [69.6, 310.0], [69.7, 310.0], [69.8, 310.0], [69.9, 310.0], [70.0, 310.0], [70.1, 310.0], [70.2, 310.0], [70.3, 310.0], [70.4, 310.0], [70.5, 310.0], [70.6, 311.0], [70.7, 311.0], [70.8, 311.0], [70.9, 311.0], [71.0, 311.0], [71.1, 311.0], [71.2, 311.0], [71.3, 311.0], [71.4, 311.0], [71.5, 311.0], [71.6, 311.0], [71.7, 311.0], [71.8, 311.0], [71.9, 311.0], [72.0, 311.0], [72.1, 311.0], [72.2, 311.0], [72.3, 311.0], [72.4, 311.0], [72.5, 311.0], [72.6, 311.0], [72.7, 311.0], [72.8, 311.0], [72.9, 311.0], [73.0, 311.0], [73.1, 311.0], [73.2, 311.0], [73.3, 311.0], [73.4, 311.0], [73.5, 311.0], [73.6, 311.0], [73.7, 311.0], [73.8, 311.0], [73.9, 311.0], [74.0, 311.0], [74.1, 311.0], [74.2, 311.0], [74.3, 311.0], [74.4, 311.0], [74.5, 311.0], [74.6, 311.0], [74.7, 311.0], [74.8, 311.0], [74.9, 311.0], [75.0, 311.0], [75.1, 311.0], [75.2, 311.0], [75.3, 311.0], [75.4, 311.0], [75.5, 311.0], [75.6, 311.0], [75.7, 311.0], [75.8, 311.0], [75.9, 311.0], [76.0, 311.0], [76.1, 311.0], [76.2, 311.0], [76.3, 311.0], [76.4, 311.0], [76.5, 311.0], [76.6, 311.0], [76.7, 311.0], [76.8, 311.0], [76.9, 311.0], [77.0, 311.0], [77.1, 311.0], [77.2, 311.0], [77.3, 311.0], [77.4, 311.0], [77.5, 311.0], [77.6, 311.0], [77.7, 311.0], [77.8, 311.0], [77.9, 311.0], [78.0, 311.0], [78.1, 311.0], [78.2, 311.0], [78.3, 311.0], [78.4, 311.0], [78.5, 311.0], [78.6, 311.0], [78.7, 311.0], [78.8, 311.0], [78.9, 311.0], [79.0, 311.0], [79.1, 311.0], [79.2, 311.0], [79.3, 311.0], [79.4, 311.0], [79.5, 311.0], [79.6, 311.0], [79.7, 311.0], [79.8, 311.0], [79.9, 311.0], [80.0, 311.0], [80.1, 311.0], [80.2, 311.0], [80.3, 311.0], [80.4, 311.0], [80.5, 311.0], [80.6, 311.0], [80.7, 311.0], [80.8, 311.0], [80.9, 311.0], [81.0, 311.0], [81.1, 311.0], [81.2, 311.0], [81.3, 311.0], [81.4, 311.0], [81.5, 311.0], [81.6, 311.0], [81.7, 311.0], [81.8, 311.0], [81.9, 311.0], [82.0, 311.0], [82.1, 311.0], [82.2, 311.0], [82.3, 311.0], [82.4, 311.0], [82.5, 311.0], [82.6, 311.0], [82.7, 311.0], [82.8, 311.0], [82.9, 311.0], [83.0, 311.0], [83.1, 311.0], [83.2, 311.0], [83.3, 311.0], [83.4, 311.0], [83.5, 311.0], [83.6, 311.0], [83.7, 312.0], [83.8, 312.0], [83.9, 312.0], [84.0, 312.0], [84.1, 312.0], [84.2, 312.0], [84.3, 312.0], [84.4, 312.0], [84.5, 312.0], [84.6, 312.0], [84.7, 312.0], [84.8, 312.0], [84.9, 312.0], [85.0, 312.0], [85.1, 312.0], [85.2, 312.0], [85.3, 312.0], [85.4, 312.0], [85.5, 312.0], [85.6, 312.0], [85.7, 312.0], [85.8, 312.0], [85.9, 312.0], [86.0, 312.0], [86.1, 312.0], [86.2, 312.0], [86.3, 312.0], [86.4, 312.0], [86.5, 312.0], [86.6, 312.0], [86.7, 312.0], [86.8, 312.0], [86.9, 312.0], [87.0, 312.0], [87.1, 312.0], [87.2, 312.0], [87.3, 312.0], [87.4, 312.0], [87.5, 312.0], [87.6, 312.0], [87.7, 312.0], [87.8, 312.0], [87.9, 312.0], [88.0, 312.0], [88.1, 312.0], [88.2, 312.0], [88.3, 312.0], [88.4, 312.0], [88.5, 312.0], [88.6, 312.0], [88.7, 312.0], [88.8, 312.0], [88.9, 312.0], [89.0, 312.0], [89.1, 312.0], [89.2, 312.0], [89.3, 312.0], [89.4, 312.0], [89.5, 312.0], [89.6, 312.0], [89.7, 312.0], [89.8, 312.0], [89.9, 312.0], [90.0, 312.0], [90.1, 312.0], [90.2, 312.0], [90.3, 312.0], [90.4, 312.0], [90.5, 313.0], [90.6, 313.0], [90.7, 313.0], [90.8, 313.0], [90.9, 313.0], [91.0, 313.0], [91.1, 313.0], [91.2, 313.0], [91.3, 313.0], [91.4, 313.0], [91.5, 313.0], [91.6, 313.0], [91.7, 313.0], [91.8, 313.0], [91.9, 313.0], [92.0, 313.0], [92.1, 313.0], [92.2, 313.0], [92.3, 313.0], [92.4, 313.0], [92.5, 313.0], [92.6, 313.0], [92.7, 313.0], [92.8, 313.0], [92.9, 313.0], [93.0, 313.0], [93.1, 313.0], [93.2, 313.0], [93.3, 313.0], [93.4, 314.0], [93.5, 314.0], [93.6, 314.0], [93.7, 314.0], [93.8, 314.0], [93.9, 314.0], [94.0, 314.0], [94.1, 314.0], [94.2, 314.0], [94.3, 314.0], [94.4, 314.0], [94.5, 314.0], [94.6, 314.0], [94.7, 314.0], [94.8, 314.0], [94.9, 314.0], [95.0, 315.0], [95.1, 315.0], [95.2, 315.0], [95.3, 315.0], [95.4, 315.0], [95.5, 315.0], [95.6, 315.0], [95.7, 315.0], [95.8, 315.0], [95.9, 316.0], [96.0, 316.0], [96.1, 316.0], [96.2, 316.0], [96.3, 316.0], [96.4, 317.0], [96.5, 317.0], [96.6, 317.0], [96.7, 317.0], [96.8, 317.0], [96.9, 318.0], [97.0, 318.0], [97.1, 318.0], [97.2, 319.0], [97.3, 319.0], [97.4, 320.0], [97.5, 320.0], [97.6, 321.0], [97.7, 322.0], [97.8, 322.0], [97.9, 323.0], [98.0, 324.0], [98.1, 325.0], [98.2, 329.0], [98.3, 335.0], [98.4, 339.0], [98.5, 346.0], [98.6, 348.0], [98.7, 350.0], [98.8, 658.0], [98.9, 667.0], [99.0, 814.0], [99.1, 964.0], [99.2, 1038.0], [99.3, 1094.0], [99.4, 1107.0], [99.5, 1120.0], [99.6, 1126.0], [99.7, 2312.0], [99.8, 3313.0], [99.9, 5311.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[0.0, 1047.0], [0.1, 1049.0], [0.2, 1050.0], [0.3, 1050.0], [0.4, 1051.0], [0.5, 1051.0], [0.6, 1052.0], [0.7, 1052.0], [0.8, 1052.0], [0.9, 1053.0], [1.0, 1053.0], [1.1, 1053.0], [1.2, 1053.0], [1.3, 1054.0], [1.4, 1054.0], [1.5, 1054.0], [1.6, 1054.0], [1.7, 1055.0], [1.8, 1055.0], [1.9, 1055.0], [2.0, 1055.0], [2.1, 1055.0], [2.2, 1055.0], [2.3, 1056.0], [2.4, 1056.0], [2.5, 1056.0], [2.6, 1056.0], [2.7, 1056.0], [2.8, 1056.0], [2.9, 1056.0], [3.0, 1056.0], [3.1, 1057.0], [3.2, 1057.0], [3.3, 1057.0], [3.4, 1057.0], [3.5, 1057.0], [3.6, 1057.0], [3.7, 1057.0], [3.8, 1057.0], [3.9, 1057.0], [4.0, 1057.0], [4.1, 1057.0], [4.2, 1057.0], [4.3, 1057.0], [4.4, 1057.0], [4.5, 1058.0], [4.6, 1058.0], [4.7, 1058.0], [4.8, 1058.0], [4.9, 1058.0], [5.0, 1058.0], [5.1, 1058.0], [5.2, 1058.0], [5.3, 1058.0], [5.4, 1058.0], [5.5, 1058.0], [5.6, 1058.0], [5.7, 1059.0], [5.8, 1059.0], [5.9, 1059.0], [6.0, 1059.0], [6.1, 1059.0], [6.2, 1059.0], [6.3, 1059.0], [6.4, 1059.0], [6.5, 1059.0], [6.6, 1059.0], [6.7, 1059.0], [6.8, 1059.0], [6.9, 1059.0], [7.0, 1060.0], [7.1, 1060.0], [7.2, 1060.0], [7.3, 1060.0], [7.4, 1060.0], [7.5, 1060.0], [7.6, 1060.0], [7.7, 1060.0], [7.8, 1060.0], [7.9, 1060.0], [8.0, 1060.0], [8.1, 1060.0], [8.2, 1060.0], [8.3, 1060.0], [8.4, 1060.0], [8.5, 1060.0], [8.6, 1061.0], [8.7, 1061.0], [8.8, 1061.0], [8.9, 1061.0], [9.0, 1061.0], [9.1, 1061.0], [9.2, 1061.0], [9.3, 1061.0], [9.4, 1061.0], [9.5, 1061.0], [9.6, 1061.0], [9.7, 1061.0], [9.8, 1061.0], [9.9, 1061.0], [10.0, 1061.0], [10.1, 1062.0], [10.2, 1062.0], [10.3, 1062.0], [10.4, 1062.0], [10.5, 1062.0], [10.6, 1062.0], [10.7, 1062.0], [10.8, 1062.0], [10.9, 1062.0], [11.0, 1062.0], [11.1, 1062.0], [11.2, 1062.0], [11.3, 1062.0], [11.4, 1062.0], [11.5, 1063.0], [11.6, 1063.0], [11.7, 1063.0], [11.8, 1063.0], [11.9, 1063.0], [12.0, 1063.0], [12.1, 1063.0], [12.2, 1063.0], [12.3, 1063.0], [12.4, 1063.0], [12.5, 1063.0], [12.6, 1063.0], [12.7, 1063.0], [12.8, 1063.0], [12.9, 1063.0], [13.0, 1064.0], [13.1, 1064.0], [13.2, 1064.0], [13.3, 1064.0], [13.4, 1064.0], [13.5, 1064.0], [13.6, 1064.0], [13.7, 1064.0], [13.8, 1064.0], [13.9, 1064.0], [14.0, 1065.0], [14.1, 1065.0], [14.2, 1065.0], [14.3, 1065.0], [14.4, 1065.0], [14.5, 1065.0], [14.6, 1065.0], [14.7, 1065.0], [14.8, 1065.0], [14.9, 1065.0], [15.0, 1065.0], [15.1, 1066.0], [15.2, 1066.0], [15.3, 1066.0], [15.4, 1066.0], [15.5, 1066.0], [15.6, 1066.0], [15.7, 1066.0], [15.8, 1066.0], [15.9, 1066.0], [16.0, 1067.0], [16.1, 1067.0], [16.2, 1067.0], [16.3, 1067.0], [16.4, 1067.0], [16.5, 1067.0], [16.6, 1067.0], [16.7, 1067.0], [16.8, 1067.0], [16.9, 1067.0], [17.0, 1067.0], [17.1, 1068.0], [17.2, 1068.0], [17.3, 1068.0], [17.4, 1068.0], [17.5, 1068.0], [17.6, 1068.0], [17.7, 1069.0], [17.8, 1069.0], [17.9, 1069.0], [18.0, 1069.0], [18.1, 1069.0], [18.2, 1069.0], [18.3, 1069.0], [18.4, 1070.0], [18.5, 1070.0], [18.6, 1070.0], [18.7, 1070.0], [18.8, 1070.0], [18.9, 1070.0], [19.0, 1071.0], [19.1, 1071.0], [19.2, 1071.0], [19.3, 1071.0], [19.4, 1071.0], [19.5, 1071.0], [19.6, 1072.0], [19.7, 1072.0], [19.8, 1072.0], [19.9, 1072.0], [20.0, 1072.0], [20.1, 1072.0], [20.2, 1073.0], [20.3, 1073.0], [20.4, 1073.0], [20.5, 1073.0], [20.6, 1074.0], [20.7, 1074.0], [20.8, 1074.0], [20.9, 1074.0], [21.0, 1075.0], [21.1, 1075.0], [21.2, 1076.0], [21.3, 1076.0], [21.4, 1077.0], [21.5, 1077.0], [21.6, 1079.0], [21.7, 1079.0], [21.8, 1079.0], [21.9, 1080.0], [22.0, 1081.0], [22.1, 1081.0], [22.2, 1082.0], [22.3, 1083.0], [22.4, 1084.0], [22.5, 1085.0], [22.6, 1088.0], [22.7, 1088.0], [22.8, 1089.0], [22.9, 1096.0], [23.0, 1100.0], [23.1, 1109.0], [23.2, 1117.0], [23.3, 1122.0], [23.4, 1131.0], [23.5, 1171.0], [23.6, 1199.0], [23.7, 1200.0], [23.8, 1201.0], [23.9, 1202.0], [24.0, 1202.0], [24.1, 1202.0], [24.2, 1202.0], [24.3, 1203.0], [24.4, 1203.0], [24.5, 1204.0], [24.6, 1204.0], [24.7, 1204.0], [24.8, 1204.0], [24.9, 1205.0], [25.0, 1205.0], [25.1, 1206.0], [25.2, 1206.0], [25.3, 1207.0], [25.4, 1207.0], [25.5, 1207.0], [25.6, 1208.0], [25.7, 1208.0], [25.8, 1208.0], [25.9, 1209.0], [26.0, 1209.0], [26.1, 1210.0], [26.2, 1210.0], [26.3, 1211.0], [26.4, 1211.0], [26.5, 1212.0], [26.6, 1212.0], [26.7, 1212.0], [26.8, 1212.0], [26.9, 1212.0], [27.0, 1213.0], [27.1, 1213.0], [27.2, 1213.0], [27.3, 1213.0], [27.4, 1214.0], [27.5, 1214.0], [27.6, 1214.0], [27.7, 1214.0], [27.8, 1214.0], [27.9, 1214.0], [28.0, 1214.0], [28.1, 1215.0], [28.2, 1215.0], [28.3, 1215.0], [28.4, 1215.0], [28.5, 1215.0], [28.6, 1215.0], [28.7, 1215.0], [28.8, 1216.0], [28.9, 1216.0], [29.0, 1216.0], [29.1, 1216.0], [29.2, 1216.0], [29.3, 1216.0], [29.4, 1217.0], [29.5, 1217.0], [29.6, 1217.0], [29.7, 1217.0], [29.8, 1218.0], [29.9, 1218.0], [30.0, 1218.0], [30.1, 1218.0], [30.2, 1218.0], [30.3, 1219.0], [30.4, 1219.0], [30.5, 1219.0], [30.6, 1219.0], [30.7, 1219.0], [30.8, 1219.0], [30.9, 1219.0], [31.0, 1220.0], [31.1, 1220.0], [31.2, 1220.0], [31.3, 1221.0], [31.4, 1221.0], [31.5, 1221.0], [31.6, 1221.0], [31.7, 1221.0], [31.8, 1221.0], [31.9, 1221.0], [32.0, 1222.0], [32.1, 1222.0], [32.2, 1222.0], [32.3, 1222.0], [32.4, 1222.0], [32.5, 1223.0], [32.6, 1223.0], [32.7, 1223.0], [32.8, 1223.0], [32.9, 1223.0], [33.0, 1224.0], [33.1, 1224.0], [33.2, 1224.0], [33.3, 1224.0], [33.4, 1224.0], [33.5, 1225.0], [33.6, 1225.0], [33.7, 1225.0], [33.8, 1225.0], [33.9, 1225.0], [34.0, 1225.0], [34.1, 1226.0], [34.2, 1226.0], [34.3, 1226.0], [34.4, 1226.0], [34.5, 1226.0], [34.6, 1226.0], [34.7, 1226.0], [34.8, 1226.0], [34.9, 1227.0], [35.0, 1227.0], [35.1, 1227.0], [35.2, 1227.0], [35.3, 1227.0], [35.4, 1227.0], [35.5, 1227.0], [35.6, 1227.0], [35.7, 1227.0], [35.8, 1228.0], [35.9, 1228.0], [36.0, 1228.0], [36.1, 1228.0], [36.2, 1228.0], [36.3, 1228.0], [36.4, 1228.0], [36.5, 1228.0], [36.6, 1228.0], [36.7, 1228.0], [36.8, 1228.0], [36.9, 1228.0], [37.0, 1228.0], [37.1, 1229.0], [37.2, 1229.0], [37.3, 1229.0], [37.4, 1229.0], [37.5, 1229.0], [37.6, 1229.0], [37.7, 1229.0], [37.8, 1229.0], [37.9, 1229.0], [38.0, 1229.0], [38.1, 1229.0], [38.2, 1230.0], [38.3, 1230.0], [38.4, 1230.0], [38.5, 1230.0], [38.6, 1230.0], [38.7, 1230.0], [38.8, 1230.0], [38.9, 1230.0], [39.0, 1230.0], [39.1, 1230.0], [39.2, 1230.0], [39.3, 1230.0], [39.4, 1231.0], [39.5, 1231.0], [39.6, 1231.0], [39.7, 1231.0], [39.8, 1231.0], [39.9, 1231.0], [40.0, 1231.0], [40.1, 1231.0], [40.2, 1231.0], [40.3, 1231.0], [40.4, 1231.0], [40.5, 1231.0], [40.6, 1231.0], [40.7, 1231.0], [40.8, 1231.0], [40.9, 1232.0], [41.0, 1232.0], [41.1, 1232.0], [41.2, 1232.0], [41.3, 1232.0], [41.4, 1232.0], [41.5, 1232.0], [41.6, 1232.0], [41.7, 1233.0], [41.8, 1233.0], [41.9, 1233.0], [42.0, 1233.0], [42.1, 1233.0], [42.2, 1233.0], [42.3, 1233.0], [42.4, 1233.0], [42.5, 1233.0], [42.6, 1233.0], [42.7, 1233.0], [42.8, 1233.0], [42.9, 1234.0], [43.0, 1234.0], [43.1, 1234.0], [43.2, 1234.0], [43.3, 1234.0], [43.4, 1234.0], [43.5, 1234.0], [43.6, 1234.0], [43.7, 1235.0], [43.8, 1235.0], [43.9, 1235.0], [44.0, 1235.0], [44.1, 1235.0], [44.2, 1235.0], [44.3, 1235.0], [44.4, 1235.0], [44.5, 1235.0], [44.6, 1235.0], [44.7, 1235.0], [44.8, 1235.0], [44.9, 1235.0], [45.0, 1236.0], [45.1, 1236.0], [45.2, 1236.0], [45.3, 1236.0], [45.4, 1236.0], [45.5, 1236.0], [45.6, 1236.0], [45.7, 1236.0], [45.8, 1236.0], [45.9, 1236.0], [46.0, 1236.0], [46.1, 1236.0], [46.2, 1236.0], [46.3, 1237.0], [46.4, 1237.0], [46.5, 1237.0], [46.6, 1237.0], [46.7, 1237.0], [46.8, 1237.0], [46.9, 1237.0], [47.0, 1237.0], [47.1, 1237.0], [47.2, 1237.0], [47.3, 1237.0], [47.4, 1237.0], [47.5, 1237.0], [47.6, 1237.0], [47.7, 1237.0], [47.8, 1237.0], [47.9, 1237.0], [48.0, 1237.0], [48.1, 1237.0], [48.2, 1238.0], [48.3, 1238.0], [48.4, 1238.0], [48.5, 1238.0], [48.6, 1238.0], [48.7, 1238.0], [48.8, 1238.0], [48.9, 1238.0], [49.0, 1238.0], [49.1, 1238.0], [49.2, 1238.0], [49.3, 1238.0], [49.4, 1238.0], [49.5, 1238.0], [49.6, 1238.0], [49.7, 1238.0], [49.8, 1239.0], [49.9, 1239.0], [50.0, 1239.0], [50.1, 1239.0], [50.2, 1239.0], [50.3, 1239.0], [50.4, 1239.0], [50.5, 1239.0], [50.6, 1239.0], [50.7, 1239.0], [50.8, 1239.0], [50.9, 1239.0], [51.0, 1239.0], [51.1, 1239.0], [51.2, 1239.0], [51.3, 1239.0], [51.4, 1239.0], [51.5, 1239.0], [51.6, 1239.0], [51.7, 1239.0], [51.8, 1239.0], [51.9, 1239.0], [52.0, 1239.0], [52.1, 1239.0], [52.2, 1239.0], [52.3, 1239.0], [52.4, 1240.0], [52.5, 1240.0], [52.6, 1240.0], [52.7, 1240.0], [52.8, 1240.0], [52.9, 1240.0], [53.0, 1240.0], [53.1, 1240.0], [53.2, 1240.0], [53.3, 1240.0], [53.4, 1240.0], [53.5, 1240.0], [53.6, 1240.0], [53.7, 1240.0], [53.8, 1240.0], [53.9, 1240.0], [54.0, 1240.0], [54.1, 1240.0], [54.2, 1240.0], [54.3, 1240.0], [54.4, 1240.0], [54.5, 1240.0], [54.6, 1240.0], [54.7, 1240.0], [54.8, 1240.0], [54.9, 1240.0], [55.0, 1240.0], [55.1, 1240.0], [55.2, 1240.0], [55.3, 1241.0], [55.4, 1241.0], [55.5, 1241.0], [55.6, 1241.0], [55.7, 1241.0], [55.8, 1241.0], [55.9, 1241.0], [56.0, 1241.0], [56.1, 1241.0], [56.2, 1241.0], [56.3, 1241.0], [56.4, 1241.0], [56.5, 1241.0], [56.6, 1241.0], [56.7, 1241.0], [56.8, 1241.0], [56.9, 1241.0], [57.0, 1241.0], [57.1, 1241.0], [57.2, 1241.0], [57.3, 1241.0], [57.4, 1241.0], [57.5, 1241.0], [57.6, 1241.0], [57.7, 1241.0], [57.8, 1241.0], [57.9, 1242.0], [58.0, 1242.0], [58.1, 1242.0], [58.2, 1242.0], [58.3, 1242.0], [58.4, 1242.0], [58.5, 1242.0], [58.6, 1242.0], [58.7, 1242.0], [58.8, 1242.0], [58.9, 1242.0], [59.0, 1242.0], [59.1, 1242.0], [59.2, 1242.0], [59.3, 1242.0], [59.4, 1242.0], [59.5, 1242.0], [59.6, 1242.0], [59.7, 1242.0], [59.8, 1242.0], [59.9, 1242.0], [60.0, 1242.0], [60.1, 1242.0], [60.2, 1242.0], [60.3, 1242.0], [60.4, 1242.0], [60.5, 1242.0], [60.6, 1242.0], [60.7, 1242.0], [60.8, 1243.0], [60.9, 1243.0], [61.0, 1243.0], [61.1, 1243.0], [61.2, 1243.0], [61.3, 1243.0], [61.4, 1243.0], [61.5, 1243.0], [61.6, 1243.0], [61.7, 1243.0], [61.8, 1243.0], [61.9, 1243.0], [62.0, 1243.0], [62.1, 1243.0], [62.2, 1243.0], [62.3, 1243.0], [62.4, 1243.0], [62.5, 1243.0], [62.6, 1243.0], [62.7, 1243.0], [62.8, 1243.0], [62.9, 1243.0], [63.0, 1243.0], [63.1, 1243.0], [63.2, 1243.0], [63.3, 1243.0], [63.4, 1243.0], [63.5, 1243.0], [63.6, 1243.0], [63.7, 1243.0], [63.8, 1244.0], [63.9, 1244.0], [64.0, 1244.0], [64.1, 1244.0], [64.2, 1244.0], [64.3, 1244.0], [64.4, 1244.0], [64.5, 1244.0], [64.6, 1244.0], [64.7, 1244.0], [64.8, 1244.0], [64.9, 1244.0], [65.0, 1244.0], [65.1, 1244.0], [65.2, 1244.0], [65.3, 1244.0], [65.4, 1244.0], [65.5, 1244.0], [65.6, 1244.0], [65.7, 1244.0], [65.8, 1244.0], [65.9, 1244.0], [66.0, 1244.0], [66.1, 1244.0], [66.2, 1244.0], [66.3, 1244.0], [66.4, 1244.0], [66.5, 1244.0], [66.6, 1244.0], [66.7, 1244.0], [66.8, 1244.0], [66.9, 1244.0], [67.0, 1244.0], [67.1, 1245.0], [67.2, 1245.0], [67.3, 1245.0], [67.4, 1245.0], [67.5, 1245.0], [67.6, 1245.0], [67.7, 1245.0], [67.8, 1245.0], [67.9, 1245.0], [68.0, 1245.0], [68.1, 1245.0], [68.2, 1245.0], [68.3, 1245.0], [68.4, 1245.0], [68.5, 1245.0], [68.6, 1245.0], [68.7, 1245.0], [68.8, 1245.0], [68.9, 1245.0], [69.0, 1245.0], [69.1, 1245.0], [69.2, 1245.0], [69.3, 1245.0], [69.4, 1245.0], [69.5, 1245.0], [69.6, 1246.0], [69.7, 1246.0], [69.8, 1246.0], [69.9, 1246.0], [70.0, 1246.0], [70.1, 1246.0], [70.2, 1246.0], [70.3, 1246.0], [70.4, 1246.0], [70.5, 1246.0], [70.6, 1246.0], [70.7, 1246.0], [70.8, 1246.0], [70.9, 1246.0], [71.0, 1246.0], [71.1, 1246.0], [71.2, 1246.0], [71.3, 1246.0], [71.4, 1246.0], [71.5, 1246.0], [71.6, 1246.0], [71.7, 1246.0], [71.8, 1246.0], [71.9, 1246.0], [72.0, 1246.0], [72.1, 1246.0], [72.2, 1247.0], [72.3, 1247.0], [72.4, 1247.0], [72.5, 1247.0], [72.6, 1247.0], [72.7, 1247.0], [72.8, 1247.0], [72.9, 1247.0], [73.0, 1247.0], [73.1, 1247.0], [73.2, 1247.0], [73.3, 1247.0], [73.4, 1247.0], [73.5, 1247.0], [73.6, 1247.0], [73.7, 1247.0], [73.8, 1247.0], [73.9, 1247.0], [74.0, 1247.0], [74.1, 1247.0], [74.2, 1247.0], [74.3, 1247.0], [74.4, 1247.0], [74.5, 1247.0], [74.6, 1247.0], [74.7, 1247.0], [74.8, 1247.0], [74.9, 1247.0], [75.0, 1248.0], [75.1, 1248.0], [75.2, 1248.0], [75.3, 1248.0], [75.4, 1248.0], [75.5, 1248.0], [75.6, 1248.0], [75.7, 1248.0], [75.8, 1248.0], [75.9, 1248.0], [76.0, 1248.0], [76.1, 1248.0], [76.2, 1248.0], [76.3, 1248.0], [76.4, 1248.0], [76.5, 1248.0], [76.6, 1248.0], [76.7, 1248.0], [76.8, 1248.0], [76.9, 1248.0], [77.0, 1249.0], [77.1, 1249.0], [77.2, 1249.0], [77.3, 1249.0], [77.4, 1249.0], [77.5, 1249.0], [77.6, 1249.0], [77.7, 1249.0], [77.8, 1249.0], [77.9, 1249.0], [78.0, 1249.0], [78.1, 1249.0], [78.2, 1249.0], [78.3, 1249.0], [78.4, 1249.0], [78.5, 1249.0], [78.6, 1249.0], [78.7, 1249.0], [78.8, 1249.0], [78.9, 1249.0], [79.0, 1250.0], [79.1, 1250.0], [79.2, 1250.0], [79.3, 1250.0], [79.4, 1250.0], [79.5, 1250.0], [79.6, 1250.0], [79.7, 1250.0], [79.8, 1250.0], [79.9, 1250.0], [80.0, 1250.0], [80.1, 1250.0], [80.2, 1250.0], [80.3, 1251.0], [80.4, 1251.0], [80.5, 1251.0], [80.6, 1251.0], [80.7, 1251.0], [80.8, 1251.0], [80.9, 1251.0], [81.0, 1251.0], [81.1, 1251.0], [81.2, 1251.0], [81.3, 1251.0], [81.4, 1251.0], [81.5, 1251.0], [81.6, 1251.0], [81.7, 1251.0], [81.8, 1251.0], [81.9, 1251.0], [82.0, 1251.0], [82.1, 1252.0], [82.2, 1252.0], [82.3, 1252.0], [82.4, 1252.0], [82.5, 1252.0], [82.6, 1252.0], [82.7, 1252.0], [82.8, 1252.0], [82.9, 1252.0], [83.0, 1252.0], [83.1, 1252.0], [83.2, 1252.0], [83.3, 1252.0], [83.4, 1252.0], [83.5, 1252.0], [83.6, 1253.0], [83.7, 1253.0], [83.8, 1253.0], [83.9, 1253.0], [84.0, 1253.0], [84.1, 1253.0], [84.2, 1253.0], [84.3, 1253.0], [84.4, 1253.0], [84.5, 1253.0], [84.6, 1254.0], [84.7, 1254.0], [84.8, 1254.0], [84.9, 1254.0], [85.0, 1254.0], [85.1, 1254.0], [85.2, 1254.0], [85.3, 1254.0], [85.4, 1254.0], [85.5, 1255.0], [85.6, 1255.0], [85.7, 1255.0], [85.8, 1255.0], [85.9, 1255.0], [86.0, 1255.0], [86.1, 1255.0], [86.2, 1255.0], [86.3, 1255.0], [86.4, 1255.0], [86.5, 1256.0], [86.6, 1256.0], [86.7, 1256.0], [86.8, 1256.0], [86.9, 1256.0], [87.0, 1256.0], [87.1, 1256.0], [87.2, 1256.0], [87.3, 1256.0], [87.4, 1256.0], [87.5, 1256.0], [87.6, 1257.0], [87.7, 1257.0], [87.8, 1257.0], [87.9, 1257.0], [88.0, 1257.0], [88.1, 1257.0], [88.2, 1257.0], [88.3, 1257.0], [88.4, 1257.0], [88.5, 1258.0], [88.6, 1258.0], [88.7, 1258.0], [88.8, 1258.0], [88.9, 1258.0], [89.0, 1258.0], [89.1, 1259.0], [89.2, 1259.0], [89.3, 1259.0], [89.4, 1259.0], [89.5, 1259.0], [89.6, 1259.0], [89.7, 1260.0], [89.8, 1260.0], [89.9, 1260.0], [90.0, 1260.0], [90.1, 1261.0], [90.2, 1262.0], [90.3, 1262.0], [90.4, 1262.0], [90.5, 1263.0], [90.6, 1263.0], [90.7, 1263.0], [90.8, 1263.0], [90.9, 1263.0], [91.0, 1264.0], [91.1, 1264.0], [91.2, 1265.0], [91.3, 1265.0], [91.4, 1265.0], [91.5, 1266.0], [91.6, 1266.0], [91.7, 1267.0], [91.8, 1267.0], [91.9, 1269.0], [92.0, 1270.0], [92.1, 1271.0], [92.2, 1273.0], [92.3, 1273.0], [92.4, 1275.0], [92.5, 1279.0], [92.6, 1283.0], [92.7, 1284.0], [92.8, 1287.0], [92.9, 1290.0], [93.0, 1301.0], [93.1, 1309.0], [93.2, 1316.0], [93.3, 1319.0], [93.4, 1324.0], [93.5, 1331.0], [93.6, 1335.0], [93.7, 1353.0], [93.8, 1355.0], [93.9, 1366.0], [94.0, 1375.0], [94.1, 1388.0], [94.2, 1390.0], [94.3, 1401.0], [94.4, 1406.0], [94.5, 1467.0], [94.6, 1497.0], [94.7, 1506.0], [94.8, 1520.0], [94.9, 1546.0], [95.0, 1552.0], [95.1, 1556.0], [95.2, 1577.0], [95.3, 1586.0], [95.4, 1619.0], [95.5, 1629.0], [95.6, 1631.0], [95.7, 1637.0], [95.8, 1641.0], [95.9, 1644.0], [96.0, 1647.0], [96.1, 1651.0], [96.2, 1659.0], [96.3, 1696.0], [96.4, 1778.0], [96.5, 1811.0], [96.6, 1827.0], [96.7, 1858.0], [96.8, 1882.0], [96.9, 1935.0], [97.0, 2060.0], [97.1, 2067.0], [97.2, 2071.0], [97.3, 2078.0], [97.4, 2081.0], [97.5, 2088.0], [97.6, 2095.0], [97.7, 2100.0], [97.8, 2111.0], [97.9, 2150.0], [98.0, 2211.0], [98.1, 2228.0], [98.2, 2245.0], [98.3, 2259.0], [98.4, 2342.0], [98.5, 2401.0], [98.6, 2430.0], [98.7, 2434.0], [98.8, 2445.0], [98.9, 2449.0], [99.0, 2454.0], [99.1, 2652.0], [99.2, 2913.0], [99.3, 3216.0], [99.4, 3359.0], [99.5, 4229.0], [99.6, 5252.0], [99.7, 6216.0], [99.8, 6252.0], [99.9, 7234.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 262.0], [0.1, 263.0], [0.2, 263.0], [0.3, 263.0], [0.4, 263.0], [0.5, 263.0], [0.6, 263.0], [0.7, 263.0], [0.8, 263.0], [0.9, 263.0], [1.0, 263.0], [1.1, 263.0], [1.2, 263.0], [1.3, 263.0], [1.4, 263.0], [1.5, 264.0], [1.6, 264.0], [1.7, 264.0], [1.8, 264.0], [1.9, 264.0], [2.0, 264.0], [2.1, 264.0], [2.2, 264.0], [2.3, 264.0], [2.4, 264.0], [2.5, 264.0], [2.6, 264.0], [2.7, 264.0], [2.8, 264.0], [2.9, 264.0], [3.0, 264.0], [3.1, 264.0], [3.2, 264.0], [3.3, 264.0], [3.4, 264.0], [3.5, 264.0], [3.6, 264.0], [3.7, 264.0], [3.8, 264.0], [3.9, 264.0], [4.0, 264.0], [4.1, 264.0], [4.2, 264.0], [4.3, 264.0], [4.4, 264.0], [4.5, 264.0], [4.6, 264.0], [4.7, 264.0], [4.8, 264.0], [4.9, 264.0], [5.0, 264.0], [5.1, 264.0], [5.2, 264.0], [5.3, 264.0], [5.4, 264.0], [5.5, 264.0], [5.6, 264.0], [5.7, 264.0], [5.8, 264.0], [5.9, 264.0], [6.0, 264.0], [6.1, 264.0], [6.2, 264.0], [6.3, 264.0], [6.4, 265.0], [6.5, 265.0], [6.6, 265.0], [6.7, 265.0], [6.8, 265.0], [6.9, 265.0], [7.0, 265.0], [7.1, 265.0], [7.2, 265.0], [7.3, 265.0], [7.4, 265.0], [7.5, 265.0], [7.6, 265.0], [7.7, 265.0], [7.8, 265.0], [7.9, 265.0], [8.0, 265.0], [8.1, 265.0], [8.2, 265.0], [8.3, 265.0], [8.4, 265.0], [8.5, 265.0], [8.6, 265.0], [8.7, 265.0], [8.8, 265.0], [8.9, 265.0], [9.0, 265.0], [9.1, 265.0], [9.2, 265.0], [9.3, 265.0], [9.4, 265.0], [9.5, 265.0], [9.6, 265.0], [9.7, 265.0], [9.8, 265.0], [9.9, 265.0], [10.0, 265.0], [10.1, 265.0], [10.2, 265.0], [10.3, 265.0], [10.4, 265.0], [10.5, 265.0], [10.6, 265.0], [10.7, 265.0], [10.8, 265.0], [10.9, 265.0], [11.0, 265.0], [11.1, 265.0], [11.2, 265.0], [11.3, 265.0], [11.4, 265.0], [11.5, 265.0], [11.6, 265.0], [11.7, 265.0], [11.8, 265.0], [11.9, 265.0], [12.0, 265.0], [12.1, 265.0], [12.2, 265.0], [12.3, 265.0], [12.4, 265.0], [12.5, 265.0], [12.6, 265.0], [12.7, 265.0], [12.8, 265.0], [12.9, 265.0], [13.0, 265.0], [13.1, 265.0], [13.2, 265.0], [13.3, 265.0], [13.4, 265.0], [13.5, 266.0], [13.6, 266.0], [13.7, 266.0], [13.8, 266.0], [13.9, 266.0], [14.0, 266.0], [14.1, 266.0], [14.2, 266.0], [14.3, 266.0], [14.4, 266.0], [14.5, 266.0], [14.6, 266.0], [14.7, 266.0], [14.8, 266.0], [14.9, 266.0], [15.0, 266.0], [15.1, 266.0], [15.2, 266.0], [15.3, 266.0], [15.4, 266.0], [15.5, 266.0], [15.6, 266.0], [15.7, 266.0], [15.8, 266.0], [15.9, 266.0], [16.0, 266.0], [16.1, 266.0], [16.2, 266.0], [16.3, 266.0], [16.4, 266.0], [16.5, 266.0], [16.6, 266.0], [16.7, 266.0], [16.8, 266.0], [16.9, 266.0], [17.0, 266.0], [17.1, 266.0], [17.2, 266.0], [17.3, 266.0], [17.4, 266.0], [17.5, 266.0], [17.6, 266.0], [17.7, 266.0], [17.8, 266.0], [17.9, 266.0], [18.0, 266.0], [18.1, 266.0], [18.2, 266.0], [18.3, 266.0], [18.4, 266.0], [18.5, 266.0], [18.6, 266.0], [18.7, 266.0], [18.8, 267.0], [18.9, 267.0], [19.0, 267.0], [19.1, 267.0], [19.2, 267.0], [19.3, 267.0], [19.4, 267.0], [19.5, 267.0], [19.6, 267.0], [19.7, 267.0], [19.8, 267.0], [19.9, 267.0], [20.0, 267.0], [20.1, 267.0], [20.2, 267.0], [20.3, 267.0], [20.4, 267.0], [20.5, 267.0], [20.6, 267.0], [20.7, 267.0], [20.8, 267.0], [20.9, 267.0], [21.0, 267.0], [21.1, 267.0], [21.2, 267.0], [21.3, 268.0], [21.4, 268.0], [21.5, 268.0], [21.6, 268.0], [21.7, 268.0], [21.8, 268.0], [21.9, 268.0], [22.0, 268.0], [22.1, 268.0], [22.2, 268.0], [22.3, 268.0], [22.4, 269.0], [22.5, 269.0], [22.6, 269.0], [22.7, 269.0], [22.8, 269.0], [22.9, 269.0], [23.0, 270.0], [23.1, 270.0], [23.2, 270.0], [23.3, 271.0], [23.4, 271.0], [23.5, 271.0], [23.6, 271.0], [23.7, 272.0], [23.8, 273.0], [23.9, 273.0], [24.0, 273.0], [24.1, 274.0], [24.2, 274.0], [24.3, 274.0], [24.4, 275.0], [24.5, 275.0], [24.6, 276.0], [24.7, 278.0], [24.8, 283.0], [24.9, 291.0], [25.0, 297.0], [25.1, 300.0], [25.2, 300.0], [25.3, 301.0], [25.4, 301.0], [25.5, 301.0], [25.6, 301.0], [25.7, 301.0], [25.8, 301.0], [25.9, 301.0], [26.0, 301.0], [26.1, 302.0], [26.2, 302.0], [26.3, 302.0], [26.4, 302.0], [26.5, 302.0], [26.6, 302.0], [26.7, 302.0], [26.8, 302.0], [26.9, 302.0], [27.0, 302.0], [27.1, 302.0], [27.2, 303.0], [27.3, 303.0], [27.4, 303.0], [27.5, 303.0], [27.6, 303.0], [27.7, 303.0], [27.8, 303.0], [27.9, 303.0], [28.0, 303.0], [28.1, 303.0], [28.2, 303.0], [28.3, 303.0], [28.4, 303.0], [28.5, 303.0], [28.6, 304.0], [28.7, 304.0], [28.8, 304.0], [28.9, 304.0], [29.0, 304.0], [29.1, 304.0], [29.2, 304.0], [29.3, 304.0], [29.4, 304.0], [29.5, 304.0], [29.6, 304.0], [29.7, 304.0], [29.8, 304.0], [29.9, 304.0], [30.0, 304.0], [30.1, 304.0], [30.2, 304.0], [30.3, 304.0], [30.4, 304.0], [30.5, 304.0], [30.6, 304.0], [30.7, 304.0], [30.8, 304.0], [30.9, 304.0], [31.0, 304.0], [31.1, 304.0], [31.2, 304.0], [31.3, 304.0], [31.4, 305.0], [31.5, 305.0], [31.6, 305.0], [31.7, 305.0], [31.8, 305.0], [31.9, 305.0], [32.0, 305.0], [32.1, 305.0], [32.2, 305.0], [32.3, 305.0], [32.4, 305.0], [32.5, 305.0], [32.6, 305.0], [32.7, 305.0], [32.8, 305.0], [32.9, 305.0], [33.0, 305.0], [33.1, 305.0], [33.2, 305.0], [33.3, 305.0], [33.4, 305.0], [33.5, 305.0], [33.6, 305.0], [33.7, 305.0], [33.8, 306.0], [33.9, 306.0], [34.0, 306.0], [34.1, 306.0], [34.2, 306.0], [34.3, 306.0], [34.4, 306.0], [34.5, 306.0], [34.6, 306.0], [34.7, 306.0], [34.8, 306.0], [34.9, 306.0], [35.0, 306.0], [35.1, 306.0], [35.2, 306.0], [35.3, 306.0], [35.4, 306.0], [35.5, 306.0], [35.6, 306.0], [35.7, 306.0], [35.8, 306.0], [35.9, 306.0], [36.0, 307.0], [36.1, 307.0], [36.2, 307.0], [36.3, 307.0], [36.4, 307.0], [36.5, 307.0], [36.6, 307.0], [36.7, 307.0], [36.8, 307.0], [36.9, 307.0], [37.0, 307.0], [37.1, 307.0], [37.2, 307.0], [37.3, 307.0], [37.4, 307.0], [37.5, 307.0], [37.6, 307.0], [37.7, 307.0], [37.8, 307.0], [37.9, 307.0], [38.0, 307.0], [38.1, 307.0], [38.2, 307.0], [38.3, 307.0], [38.4, 307.0], [38.5, 307.0], [38.6, 307.0], [38.7, 307.0], [38.8, 307.0], [38.9, 307.0], [39.0, 307.0], [39.1, 307.0], [39.2, 307.0], [39.3, 307.0], [39.4, 308.0], [39.5, 308.0], [39.6, 308.0], [39.7, 308.0], [39.8, 308.0], [39.9, 308.0], [40.0, 308.0], [40.1, 308.0], [40.2, 308.0], [40.3, 308.0], [40.4, 308.0], [40.5, 308.0], [40.6, 308.0], [40.7, 308.0], [40.8, 308.0], [40.9, 308.0], [41.0, 308.0], [41.1, 308.0], [41.2, 308.0], [41.3, 308.0], [41.4, 308.0], [41.5, 308.0], [41.6, 308.0], [41.7, 308.0], [41.8, 308.0], [41.9, 308.0], [42.0, 308.0], [42.1, 308.0], [42.2, 308.0], [42.3, 308.0], [42.4, 308.0], [42.5, 308.0], [42.6, 308.0], [42.7, 308.0], [42.8, 308.0], [42.9, 308.0], [43.0, 308.0], [43.1, 308.0], [43.2, 308.0], [43.3, 308.0], [43.4, 308.0], [43.5, 308.0], [43.6, 308.0], [43.7, 308.0], [43.8, 308.0], [43.9, 308.0], [44.0, 308.0], [44.1, 308.0], [44.2, 309.0], [44.3, 309.0], [44.4, 309.0], [44.5, 309.0], [44.6, 309.0], [44.7, 309.0], [44.8, 309.0], [44.9, 309.0], [45.0, 309.0], [45.1, 309.0], [45.2, 309.0], [45.3, 309.0], [45.4, 309.0], [45.5, 309.0], [45.6, 309.0], [45.7, 309.0], [45.8, 309.0], [45.9, 309.0], [46.0, 309.0], [46.1, 309.0], [46.2, 309.0], [46.3, 309.0], [46.4, 309.0], [46.5, 309.0], [46.6, 309.0], [46.7, 309.0], [46.8, 309.0], [46.9, 309.0], [47.0, 309.0], [47.1, 309.0], [47.2, 309.0], [47.3, 309.0], [47.4, 309.0], [47.5, 309.0], [47.6, 309.0], [47.7, 309.0], [47.8, 309.0], [47.9, 309.0], [48.0, 309.0], [48.1, 309.0], [48.2, 309.0], [48.3, 309.0], [48.4, 309.0], [48.5, 309.0], [48.6, 309.0], [48.7, 309.0], [48.8, 309.0], [48.9, 309.0], [49.0, 309.0], [49.1, 309.0], [49.2, 309.0], [49.3, 309.0], [49.4, 309.0], [49.5, 309.0], [49.6, 309.0], [49.7, 309.0], [49.8, 309.0], [49.9, 310.0], [50.0, 310.0], [50.1, 310.0], [50.2, 310.0], [50.3, 310.0], [50.4, 310.0], [50.5, 310.0], [50.6, 310.0], [50.7, 310.0], [50.8, 310.0], [50.9, 310.0], [51.0, 310.0], [51.1, 310.0], [51.2, 310.0], [51.3, 310.0], [51.4, 310.0], [51.5, 310.0], [51.6, 310.0], [51.7, 310.0], [51.8, 310.0], [51.9, 310.0], [52.0, 310.0], [52.1, 310.0], [52.2, 310.0], [52.3, 310.0], [52.4, 310.0], [52.5, 310.0], [52.6, 310.0], [52.7, 310.0], [52.8, 310.0], [52.9, 310.0], [53.0, 310.0], [53.1, 310.0], [53.2, 310.0], [53.3, 310.0], [53.4, 310.0], [53.5, 310.0], [53.6, 310.0], [53.7, 310.0], [53.8, 310.0], [53.9, 310.0], [54.0, 310.0], [54.1, 310.0], [54.2, 310.0], [54.3, 310.0], [54.4, 310.0], [54.5, 310.0], [54.6, 310.0], [54.7, 310.0], [54.8, 310.0], [54.9, 310.0], [55.0, 310.0], [55.1, 310.0], [55.2, 310.0], [55.3, 310.0], [55.4, 310.0], [55.5, 310.0], [55.6, 310.0], [55.7, 310.0], [55.8, 310.0], [55.9, 310.0], [56.0, 310.0], [56.1, 310.0], [56.2, 310.0], [56.3, 310.0], [56.4, 310.0], [56.5, 310.0], [56.6, 310.0], [56.7, 310.0], [56.8, 310.0], [56.9, 310.0], [57.0, 310.0], [57.1, 310.0], [57.2, 310.0], [57.3, 310.0], [57.4, 310.0], [57.5, 310.0], [57.6, 310.0], [57.7, 310.0], [57.8, 310.0], [57.9, 310.0], [58.0, 310.0], [58.1, 310.0], [58.2, 310.0], [58.3, 311.0], [58.4, 311.0], [58.5, 311.0], [58.6, 311.0], [58.7, 311.0], [58.8, 311.0], [58.9, 311.0], [59.0, 311.0], [59.1, 311.0], [59.2, 311.0], [59.3, 311.0], [59.4, 311.0], [59.5, 311.0], [59.6, 311.0], [59.7, 311.0], [59.8, 311.0], [59.9, 311.0], [60.0, 311.0], [60.1, 311.0], [60.2, 311.0], [60.3, 311.0], [60.4, 311.0], [60.5, 311.0], [60.6, 311.0], [60.7, 311.0], [60.8, 311.0], [60.9, 311.0], [61.0, 311.0], [61.1, 311.0], [61.2, 311.0], [61.3, 311.0], [61.4, 311.0], [61.5, 311.0], [61.6, 311.0], [61.7, 311.0], [61.8, 311.0], [61.9, 311.0], [62.0, 311.0], [62.1, 311.0], [62.2, 311.0], [62.3, 311.0], [62.4, 311.0], [62.5, 311.0], [62.6, 311.0], [62.7, 311.0], [62.8, 311.0], [62.9, 311.0], [63.0, 311.0], [63.1, 311.0], [63.2, 311.0], [63.3, 311.0], [63.4, 311.0], [63.5, 311.0], [63.6, 311.0], [63.7, 311.0], [63.8, 311.0], [63.9, 311.0], [64.0, 311.0], [64.1, 311.0], [64.2, 311.0], [64.3, 311.0], [64.4, 311.0], [64.5, 311.0], [64.6, 311.0], [64.7, 311.0], [64.8, 311.0], [64.9, 311.0], [65.0, 311.0], [65.1, 311.0], [65.2, 311.0], [65.3, 311.0], [65.4, 311.0], [65.5, 311.0], [65.6, 311.0], [65.7, 311.0], [65.8, 311.0], [65.9, 311.0], [66.0, 311.0], [66.1, 311.0], [66.2, 311.0], [66.3, 311.0], [66.4, 311.0], [66.5, 311.0], [66.6, 311.0], [66.7, 311.0], [66.8, 311.0], [66.9, 311.0], [67.0, 311.0], [67.1, 311.0], [67.2, 311.0], [67.3, 311.0], [67.4, 311.0], [67.5, 311.0], [67.6, 311.0], [67.7, 311.0], [67.8, 311.0], [67.9, 311.0], [68.0, 311.0], [68.1, 311.0], [68.2, 311.0], [68.3, 311.0], [68.4, 311.0], [68.5, 311.0], [68.6, 311.0], [68.7, 311.0], [68.8, 311.0], [68.9, 311.0], [69.0, 311.0], [69.1, 311.0], [69.2, 311.0], [69.3, 311.0], [69.4, 311.0], [69.5, 311.0], [69.6, 311.0], [69.7, 311.0], [69.8, 311.0], [69.9, 311.0], [70.0, 311.0], [70.1, 311.0], [70.2, 311.0], [70.3, 311.0], [70.4, 311.0], [70.5, 311.0], [70.6, 311.0], [70.7, 311.0], [70.8, 312.0], [70.9, 312.0], [71.0, 312.0], [71.1, 312.0], [71.2, 312.0], [71.3, 312.0], [71.4, 312.0], [71.5, 312.0], [71.6, 312.0], [71.7, 312.0], [71.8, 312.0], [71.9, 312.0], [72.0, 312.0], [72.1, 312.0], [72.2, 312.0], [72.3, 312.0], [72.4, 312.0], [72.5, 312.0], [72.6, 312.0], [72.7, 312.0], [72.8, 312.0], [72.9, 312.0], [73.0, 312.0], [73.1, 312.0], [73.2, 312.0], [73.3, 312.0], [73.4, 312.0], [73.5, 312.0], [73.6, 312.0], [73.7, 312.0], [73.8, 312.0], [73.9, 312.0], [74.0, 312.0], [74.1, 312.0], [74.2, 312.0], [74.3, 312.0], [74.4, 312.0], [74.5, 312.0], [74.6, 312.0], [74.7, 312.0], [74.8, 312.0], [74.9, 312.0], [75.0, 312.0], [75.1, 312.0], [75.2, 312.0], [75.3, 312.0], [75.4, 312.0], [75.5, 312.0], [75.6, 312.0], [75.7, 312.0], [75.8, 312.0], [75.9, 312.0], [76.0, 312.0], [76.1, 312.0], [76.2, 312.0], [76.3, 312.0], [76.4, 312.0], [76.5, 312.0], [76.6, 312.0], [76.7, 312.0], [76.8, 312.0], [76.9, 312.0], [77.0, 312.0], [77.1, 312.0], [77.2, 312.0], [77.3, 312.0], [77.4, 312.0], [77.5, 312.0], [77.6, 312.0], [77.7, 312.0], [77.8, 312.0], [77.9, 312.0], [78.0, 312.0], [78.1, 312.0], [78.2, 312.0], [78.3, 312.0], [78.4, 312.0], [78.5, 312.0], [78.6, 312.0], [78.7, 312.0], [78.8, 312.0], [78.9, 312.0], [79.0, 312.0], [79.1, 312.0], [79.2, 312.0], [79.3, 312.0], [79.4, 312.0], [79.5, 312.0], [79.6, 312.0], [79.7, 312.0], [79.8, 312.0], [79.9, 312.0], [80.0, 312.0], [80.1, 312.0], [80.2, 312.0], [80.3, 312.0], [80.4, 312.0], [80.5, 312.0], [80.6, 312.0], [80.7, 312.0], [80.8, 312.0], [80.9, 312.0], [81.0, 312.0], [81.1, 312.0], [81.2, 312.0], [81.3, 312.0], [81.4, 312.0], [81.5, 312.0], [81.6, 312.0], [81.7, 312.0], [81.8, 312.0], [81.9, 312.0], [82.0, 312.0], [82.1, 312.0], [82.2, 312.0], [82.3, 312.0], [82.4, 312.0], [82.5, 312.0], [82.6, 312.0], [82.7, 312.0], [82.8, 312.0], [82.9, 313.0], [83.0, 313.0], [83.1, 313.0], [83.2, 313.0], [83.3, 313.0], [83.4, 313.0], [83.5, 313.0], [83.6, 313.0], [83.7, 313.0], [83.8, 313.0], [83.9, 313.0], [84.0, 313.0], [84.1, 313.0], [84.2, 313.0], [84.3, 313.0], [84.4, 313.0], [84.5, 313.0], [84.6, 313.0], [84.7, 313.0], [84.8, 313.0], [84.9, 313.0], [85.0, 313.0], [85.1, 313.0], [85.2, 313.0], [85.3, 313.0], [85.4, 313.0], [85.5, 313.0], [85.6, 313.0], [85.7, 313.0], [85.8, 313.0], [85.9, 313.0], [86.0, 313.0], [86.1, 313.0], [86.2, 313.0], [86.3, 313.0], [86.4, 313.0], [86.5, 313.0], [86.6, 313.0], [86.7, 313.0], [86.8, 313.0], [86.9, 313.0], [87.0, 313.0], [87.1, 313.0], [87.2, 313.0], [87.3, 313.0], [87.4, 313.0], [87.5, 313.0], [87.6, 313.0], [87.7, 313.0], [87.8, 313.0], [87.9, 313.0], [88.0, 313.0], [88.1, 313.0], [88.2, 313.0], [88.3, 313.0], [88.4, 313.0], [88.5, 313.0], [88.6, 313.0], [88.7, 313.0], [88.8, 313.0], [88.9, 313.0], [89.0, 313.0], [89.1, 313.0], [89.2, 313.0], [89.3, 313.0], [89.4, 313.0], [89.5, 313.0], [89.6, 313.0], [89.7, 313.0], [89.8, 313.0], [89.9, 313.0], [90.0, 313.0], [90.1, 313.0], [90.2, 313.0], [90.3, 314.0], [90.4, 314.0], [90.5, 314.0], [90.6, 314.0], [90.7, 314.0], [90.8, 314.0], [90.9, 314.0], [91.0, 314.0], [91.1, 314.0], [91.2, 314.0], [91.3, 314.0], [91.4, 314.0], [91.5, 314.0], [91.6, 314.0], [91.7, 314.0], [91.8, 314.0], [91.9, 314.0], [92.0, 314.0], [92.1, 314.0], [92.2, 314.0], [92.3, 314.0], [92.4, 314.0], [92.5, 314.0], [92.6, 314.0], [92.7, 314.0], [92.8, 314.0], [92.9, 314.0], [93.0, 314.0], [93.1, 314.0], [93.2, 314.0], [93.3, 314.0], [93.4, 314.0], [93.5, 314.0], [93.6, 314.0], [93.7, 315.0], [93.8, 315.0], [93.9, 315.0], [94.0, 315.0], [94.1, 315.0], [94.2, 315.0], [94.3, 315.0], [94.4, 315.0], [94.5, 315.0], [94.6, 315.0], [94.7, 315.0], [94.8, 315.0], [94.9, 315.0], [95.0, 315.0], [95.1, 315.0], [95.2, 316.0], [95.3, 316.0], [95.4, 316.0], [95.5, 316.0], [95.6, 316.0], [95.7, 316.0], [95.8, 316.0], [95.9, 316.0], [96.0, 316.0], [96.1, 316.0], [96.2, 316.0], [96.3, 316.0], [96.4, 317.0], [96.5, 317.0], [96.6, 317.0], [96.7, 317.0], [96.8, 318.0], [96.9, 318.0], [97.0, 318.0], [97.1, 318.0], [97.2, 319.0], [97.3, 319.0], [97.4, 320.0], [97.5, 321.0], [97.6, 322.0], [97.7, 322.0], [97.8, 323.0], [97.9, 324.0], [98.0, 327.0], [98.1, 328.0], [98.2, 330.0], [98.3, 331.0], [98.4, 334.0], [98.5, 338.0], [98.6, 344.0], [98.7, 352.0], [98.8, 616.0], [98.9, 622.0], [99.0, 629.0], [99.1, 656.0], [99.2, 915.0], [99.3, 974.0], [99.4, 1051.0], [99.5, 1057.0], [99.6, 1069.0], [99.7, 2312.0], [99.8, 3312.0], [99.9, 6310.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 2459.0, "series": [{"data": [[4300.0, 2.0], [1100.0, 12.0], [2300.0, 2.0], [600.0, 8.0], [300.0, 2451.0], [5300.0, 3.0], [6300.0, 1.0], [200.0, 840.0], [3300.0, 2.0], [800.0, 1.0], [900.0, 6.0], [1000.0, 5.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[8300.0, 1.0], [1000.0, 766.0], [1100.0, 21.0], [1200.0, 2312.0], [1300.0, 43.0], [1400.0, 13.0], [1500.0, 23.0], [1600.0, 32.0], [1700.0, 6.0], [1800.0, 11.0], [1900.0, 5.0], [2000.0, 24.0], [2100.0, 10.0], [2200.0, 13.0], [2300.0, 4.0], [2400.0, 19.0], [2600.0, 2.0], [2800.0, 1.0], [2900.0, 3.0], [3100.0, 1.0], [3300.0, 1.0], [3200.0, 4.0], [4100.0, 1.0], [4200.0, 3.0], [5200.0, 4.0], [5600.0, 1.0], [6200.0, 4.0], [6300.0, 1.0], [7200.0, 4.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[4300.0, 1.0], [2300.0, 1.0], [600.0, 11.0], [300.0, 2459.0], [6300.0, 2.0], [200.0, 834.0], [3300.0, 4.0], [800.0, 1.0], [900.0, 5.0], [7300.0, 2.0], [1000.0, 13.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6584.0, "series": [{"data": [[0.0, 6584.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3217.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 185.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.219999999999995, "minX": 1.75727064E12, "maxY": 21.355999999999995, "series": [{"data": [[1.75727136E12, 19.261044176706807], [1.75727106E12, 18.692614770459087], [1.75727172E12, 19.338709677419363], [1.75727142E12, 19.121272365805158], [1.75727112E12, 19.32539682539683], [1.75727076E12, 19.804081632653055], [1.75727082E12, 18.7128514056225], [1.75727178E12, 18.892000000000007], [1.75727148E12, 18.73481781376518], [1.75727118E12, 19.03999999999999], [1.7572707E12, 18.090909090909097], [1.75727184E12, 19.06387665198238], [1.75727088E12, 18.436873747494985], [1.75727154E12, 18.994106090373272], [1.75727124E12, 19.28199999999998], [1.75727064E12, 17.219999999999995], [1.75727094E12, 19.33794466403162], [1.7572716E12, 18.254509018036067], [1.7572713E12, 18.97373737373736], [1.757271E12, 21.09255533199196], [1.75727166E12, 21.355999999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75727184E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 285.2247191011235, "minX": 1.0, "maxY": 5257.0, "series": [{"data": [[32.0, 808.4166666666669], [33.0, 309.25], [35.0, 4511.2], [34.0, 317.33333333333337], [9.0, 310.0], [10.0, 311.0], [11.0, 311.0], [12.0, 306.0], [13.0, 287.5], [14.0, 300.13043478260875], [15.0, 285.2247191011235], [16.0, 295.4973821989529], [1.0, 309.0], [17.0, 299.5876288659794], [18.0, 302.6426380368102], [19.0, 309.25588697017275], [20.0, 305.8047999999997], [21.0, 306.8834688346883], [22.0, 308.8374999999998], [23.0, 320.7000000000001], [24.0, 304.74285714285713], [25.0, 310.57142857142856], [26.0, 308.3333333333333], [27.0, 309.5], [28.0, 310.0], [29.0, 1644.333333333333], [30.0, 310.0], [31.0, 307.5]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[19.1410141014101, 316.42034203420445]], "isOverall": false, "label": "Create Booking-Aggregated", "isController": false}, {"data": [[32.0, 2290.1111111111113], [33.0, 3519.5714285714284], [2.0, 1242.0], [34.0, 3408.8888888888887], [35.0, 2823.0], [36.0, 5248.666666666667], [11.0, 2090.5], [12.0, 1241.0], [13.0, 1140.0], [14.0, 1191.24], [15.0, 1188.8444444444442], [16.0, 1199.8009478672984], [17.0, 1214.3418604651172], [18.0, 1219.2385185185185], [19.0, 1241.7373271889398], [20.0, 1244.7962962962958], [21.0, 1254.623100303951], [22.0, 1319.9268292682914], [23.0, 1251.2428571428575], [24.0, 1299.6451612903227], [25.0, 1219.0], [26.0, 1242.5], [29.0, 3668.8333333333335], [30.0, 2998.75], [31.0, 5257.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[19.03270327032695, 1264.5172517251772]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[32.0, 2310.0], [33.0, 307.2], [2.0, 313.0], [35.0, 4661.0], [34.0, 2063.0], [36.0, 3313.0], [3.0, 310.0], [4.0, 311.0], [5.0, 313.0], [6.0, 313.0], [7.0, 310.0], [8.0, 310.0], [9.0, 305.0], [10.0, 303.0], [11.0, 311.0], [12.0, 314.0], [13.0, 311.0], [14.0, 286.5], [15.0, 287.98507462686564], [16.0, 292.06918238993717], [1.0, 311.0], [17.0, 293.60436137071696], [18.0, 302.3644067796609], [19.0, 305.6487663280117], [20.0, 305.93843594009945], [21.0, 308.49263157894706], [22.0, 313.60386473429963], [23.0, 314.13461538461536], [24.0, 310.5111111111111], [25.0, 300.64285714285717], [26.0, 309.2], [27.0, 308.25], [28.0, 307.6666666666667], [29.0, 937.0], [30.0, 1309.3333333333333], [31.0, 1978.3333333333335]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[19.365136513651393, 317.64596459645963]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 36.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 273.1666666666667, "minX": 1.75727064E12, "maxY": 7294.866666666667, "series": [{"data": [[1.75727136E12, 7123.65], [1.75727106E12, 7167.833333333333], [1.75727172E12, 7088.866666666667], [1.75727142E12, 7193.833333333333], [1.75727112E12, 7205.466666666666], [1.75727076E12, 7008.383333333333], [1.75727082E12, 7115.266666666666], [1.75727178E12, 7154.566666666667], [1.75727148E12, 7053.366666666667], [1.75727118E12, 7146.166666666667], [1.7572707E12, 7241.333333333333], [1.75727184E12, 6507.116666666667], [1.75727088E12, 7135.133333333333], [1.75727154E12, 7294.866666666667], [1.75727124E12, 7154.55], [1.75727064E12, 703.8166666666667], [1.75727094E12, 7244.116666666667], [1.7572716E12, 7139.65], [1.7572713E12, 7078.883333333333], [1.757271E12, 7108.416666666667], [1.75727166E12, 7165.816666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75727136E12, 2653.95], [1.75727106E12, 2657.366666666667], [1.75727172E12, 2630.9166666666665], [1.75727142E12, 2659.95], [1.75727112E12, 2677.3333333333335], [1.75727076E12, 2599.8166666666666], [1.75727082E12, 2646.133333333333], [1.75727178E12, 2655.733333333333], [1.75727148E12, 2633.5666666666666], [1.75727118E12, 2651.65], [1.7572707E12, 2688.4166666666665], [1.75727184E12, 2410.85], [1.75727088E12, 2658.25], [1.75727154E12, 2701.05], [1.75727124E12, 2652.983333333333], [1.75727064E12, 273.1666666666667], [1.75727094E12, 2685.4], [1.7572716E12, 2647.0666666666666], [1.7572713E12, 2631.85], [1.757271E12, 2646.866666666667], [1.75727166E12, 2658.266666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75727184E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 265.6363636363637, "minX": 1.75727064E12, "maxY": 1570.109756097562, "series": [{"data": [[1.75727136E12, 318.9289940828402], [1.75727106E12, 302.7048192771084], [1.75727172E12, 300.98780487804885], [1.75727142E12, 310.42073170731715], [1.75727112E12, 314.29761904761915], [1.75727076E12, 297.3395061728394], [1.75727082E12, 284.74096385542146], [1.75727178E12, 308.80722891566273], [1.75727148E12, 309.55421686746985], [1.75727118E12, 308.66060606060614], [1.7572707E12, 270.33727810650885], [1.75727184E12, 309.39869281045736], [1.75727088E12, 296.0357142857142], [1.75727154E12, 309.51176470588223], [1.75727124E12, 302.53012048192755], [1.75727064E12, 289.11764705882354], [1.75727094E12, 328.24404761904765], [1.7572716E12, 284.969512195122], [1.7572713E12, 308.77575757575767], [1.757271E12, 438.76190476190493], [1.75727166E12, 422.1538461538463]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75727136E12, 1297.7454545454536], [1.75727106E12, 1263.1856287425153], [1.75727172E12, 1213.0838323353291], [1.75727142E12, 1261.1257485029935], [1.75727112E12, 1264.9880952380947], [1.75727076E12, 1312.9631901840494], [1.75727082E12, 1197.421686746988], [1.75727178E12, 1239.8323353293417], [1.75727148E12, 1250.4378698224848], [1.75727118E12, 1201.916167664671], [1.7572707E12, 1082.556886227545], [1.75727184E12, 1235.9241379310338], [1.75727088E12, 1238.9221556886225], [1.75727154E12, 1241.0843373493988], [1.75727124E12, 1195.6424242424243], [1.75727064E12, 1255.2272727272727], [1.75727094E12, 1288.8095238095245], [1.7572716E12, 1160.98224852071], [1.7572713E12, 1245.2335329341317], [1.757271E12, 1532.7784431137732], [1.75727166E12, 1570.109756097562]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75727136E12, 324.40243902439045], [1.75727106E12, 287.85119047619054], [1.75727172E12, 300.19393939393933], [1.75727142E12, 311.1686046511626], [1.75727112E12, 314.2559523809523], [1.75727076E12, 308.6], [1.75727082E12, 296.3734939759035], [1.75727178E12, 309.23353293413174], [1.75727148E12, 311.0754716981132], [1.75727118E12, 304.3154761904761], [1.7572707E12, 270.7117647058823], [1.75727184E12, 309.71153846153845], [1.75727088E12, 292.8658536585364], [1.75727154E12, 311.19653179190755], [1.75727124E12, 294.88165680473384], [1.75727064E12, 265.6363636363637], [1.75727094E12, 315.68235294117636], [1.7572716E12, 287.5783132530122], [1.7572713E12, 309.9263803680982], [1.757271E12, 431.10493827160485], [1.75727166E12, 468.497005988024]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75727184E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 265.6363636363637, "minX": 1.75727064E12, "maxY": 1570.103658536586, "series": [{"data": [[1.75727136E12, 318.91715976331363], [1.75727106E12, 302.68674698795166], [1.75727172E12, 300.96951219512204], [1.75727142E12, 310.41463414634154], [1.75727112E12, 314.2738095238096], [1.75727076E12, 297.31481481481484], [1.75727082E12, 284.7168674698795], [1.75727178E12, 308.80120481927725], [1.75727148E12, 309.5481927710844], [1.75727118E12, 308.6484848484851], [1.7572707E12, 270.2899408284024], [1.75727184E12, 309.39869281045736], [1.75727088E12, 296.00595238095235], [1.75727154E12, 309.49411764705906], [1.75727124E12, 302.51807228915663], [1.75727064E12, 289.05882352941177], [1.75727094E12, 328.21428571428567], [1.7572716E12, 284.9512195121953], [1.7572713E12, 308.757575757576], [1.757271E12, 438.720238095238], [1.75727166E12, 422.1479289940828]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75727136E12, 1297.7333333333336], [1.75727106E12, 1263.155688622755], [1.75727172E12, 1213.0838323353291], [1.75727142E12, 1261.0958083832336], [1.75727112E12, 1264.9821428571418], [1.75727076E12, 1312.9263803680988], [1.75727082E12, 1197.39156626506], [1.75727178E12, 1239.820359281437], [1.75727148E12, 1250.4142011834324], [1.75727118E12, 1201.9101796407178], [1.7572707E12, 1082.508982035928], [1.75727184E12, 1235.9172413793096], [1.75727088E12, 1238.8922155688617], [1.75727154E12, 1241.0783132530114], [1.75727124E12, 1195.6242424242423], [1.75727064E12, 1245.2272727272725], [1.75727094E12, 1288.7678571428567], [1.7572716E12, 1160.9704142011828], [1.7572713E12, 1245.2275449101794], [1.757271E12, 1532.7604790419157], [1.75727166E12, 1570.103658536586]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75727136E12, 324.3963414634149], [1.75727106E12, 287.83333333333337], [1.75727172E12, 300.1878787878788], [1.75727142E12, 311.1453488372093], [1.75727112E12, 314.23214285714266], [1.75727076E12, 308.56969696969696], [1.75727082E12, 296.3493975903615], [1.75727178E12, 309.23353293413174], [1.75727148E12, 311.062893081761], [1.75727118E12, 304.2916666666666], [1.7572707E12, 270.6176470588236], [1.75727184E12, 309.71153846153845], [1.75727088E12, 292.8536585365854], [1.75727154E12, 311.17919075144505], [1.75727124E12, 294.869822485207], [1.75727064E12, 265.6363636363637], [1.75727094E12, 315.67647058823525], [1.7572716E12, 287.5783132530122], [1.7572713E12, 309.9141104294478], [1.757271E12, 431.07407407407425], [1.75727166E12, 468.48502994011966]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75727184E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75727064E12, "maxY": 1043.5269461077846, "series": [{"data": [[1.75727136E12, 0.0], [1.75727106E12, 0.0], [1.75727172E12, 0.0], [1.75727142E12, 0.0], [1.75727112E12, 0.0], [1.75727076E12, 0.0], [1.75727082E12, 0.0], [1.75727178E12, 0.0], [1.75727148E12, 0.0], [1.75727118E12, 0.0], [1.7572707E12, 0.0], [1.75727184E12, 0.0], [1.75727088E12, 0.0], [1.75727154E12, 0.0], [1.75727124E12, 0.0], [1.75727064E12, 0.0], [1.75727094E12, 0.0], [1.7572716E12, 0.0], [1.7572713E12, 0.0], [1.757271E12, 0.0], [1.75727166E12, 0.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75727136E12, 978.0484848484849], [1.75727106E12, 954.7964071856289], [1.75727172E12, 910.9760479041914], [1.75727142E12, 946.7245508982033], [1.75727112E12, 951.0059523809527], [1.75727076E12, 982.4417177914112], [1.75727082E12, 900.8192771084335], [1.75727178E12, 931.5988023952098], [1.75727148E12, 941.272189349113], [1.75727118E12, 903.916167664671], [1.7572707E12, 806.9940119760477], [1.75727184E12, 927.1448275862068], [1.75727088E12, 938.3772455089818], [1.75727154E12, 932.4036144578313], [1.75727124E12, 893.5636363636364], [1.75727064E12, 973.4545454545456], [1.75727094E12, 975.1607142857144], [1.7572716E12, 876.295857988166], [1.7572713E12, 936.6946107784432], [1.757271E12, 1043.5269461077846], [1.75727166E12, 892.1402439024388]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75727136E12, 0.0], [1.75727106E12, 0.0], [1.75727172E12, 0.0], [1.75727142E12, 0.0], [1.75727112E12, 0.0], [1.75727076E12, 0.0], [1.75727082E12, 0.0], [1.75727178E12, 0.0], [1.75727148E12, 0.0], [1.75727118E12, 0.0], [1.7572707E12, 0.0], [1.75727184E12, 0.0], [1.75727088E12, 0.0], [1.75727154E12, 0.0], [1.75727124E12, 0.0], [1.75727064E12, 0.0], [1.75727094E12, 0.0], [1.7572716E12, 0.0], [1.7572713E12, 0.0], [1.757271E12, 0.0], [1.75727166E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75727184E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 262.0, "minX": 1.75727064E12, "maxY": 7256.0, "series": [{"data": [[1.75727136E12, 2449.0], [1.75727106E12, 3216.0], [1.75727172E12, 1425.0], [1.75727142E12, 2430.0], [1.75727112E12, 2076.0], [1.75727076E12, 4105.0], [1.75727082E12, 2907.0], [1.75727178E12, 1858.0], [1.75727148E12, 2212.0], [1.75727118E12, 2342.0], [1.7572707E12, 1696.0], [1.75727184E12, 1301.0], [1.75727088E12, 2451.0], [1.75727154E12, 1324.0], [1.75727124E12, 2255.0], [1.75727064E12, 2472.0], [1.75727094E12, 2935.0], [1.7572716E12, 2913.0], [1.7572713E12, 1845.0], [1.757271E12, 5257.0], [1.75727166E12, 7256.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75727136E12, 1250.0], [1.75727106E12, 1248.0], [1.75727172E12, 1243.0], [1.75727142E12, 1247.0], [1.75727112E12, 1250.5], [1.75727076E12, 1248.0], [1.75727082E12, 1240.1], [1.75727178E12, 1242.0], [1.75727148E12, 1248.5], [1.75727118E12, 1247.0], [1.7572707E12, 1071.0], [1.75727184E12, 1242.0], [1.75727088E12, 1254.0], [1.75727154E12, 1247.0], [1.75727124E12, 1242.9], [1.75727064E12, 1081.8], [1.75727094E12, 1249.0], [1.7572716E12, 1238.0], [1.7572713E12, 1243.0], [1.757271E12, 1257.0], [1.75727166E12, 1243.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75727136E12, 2225.3399999999997], [1.75727106E12, 2395.720000000003], [1.75727172E12, 1257.06], [1.75727142E12, 1545.9599999999969], [1.75727112E12, 1616.1999999999994], [1.75727076E12, 2415.779999999999], [1.75727082E12, 2067.22], [1.75727178E12, 1283.8300000000002], [1.75727148E12, 1347.2000000000003], [1.75727118E12, 1926.1800000000007], [1.7572707E12, 1465.3700000000022], [1.75727184E12, 1248.45], [1.75727088E12, 2097.0], [1.75727154E12, 1274.9], [1.75727124E12, 2075.4900000000025], [1.75727064E12, 2472.0], [1.75727094E12, 2067.990000000001], [1.7572716E12, 1262.0], [1.7572713E12, 1349.1200000000006], [1.757271E12, 4221.719999999999], [1.75727166E12, 6254.900000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75727136E12, 1259.1999999999998], [1.75727106E12, 1264.6999999999998], [1.75727172E12, 1248.0], [1.75727142E12, 1254.0], [1.75727112E12, 1258.75], [1.75727076E12, 1303.449999999999], [1.75727082E12, 1252.0], [1.75727178E12, 1244.95], [1.75727148E12, 1253.25], [1.75727118E12, 1256.0], [1.7572707E12, 1078.65], [1.75727184E12, 1245.0], [1.75727088E12, 1273.0], [1.75727154E12, 1253.0], [1.75727124E12, 1251.0], [1.75727064E12, 2059.2499999999973], [1.75727094E12, 1257.65], [1.7572716E12, 1244.0], [1.7572713E12, 1249.0], [1.757271E12, 2095.6], [1.75727166E12, 1291.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75727136E12, 299.0], [1.75727106E12, 263.0], [1.75727172E12, 262.0], [1.75727142E12, 301.0], [1.75727112E12, 300.0], [1.75727076E12, 263.0], [1.75727082E12, 262.0], [1.75727178E12, 299.0], [1.75727148E12, 300.0], [1.75727118E12, 263.0], [1.7572707E12, 262.0], [1.75727184E12, 300.0], [1.75727088E12, 263.0], [1.75727154E12, 300.0], [1.75727124E12, 262.0], [1.75727064E12, 263.0], [1.75727094E12, 300.0], [1.7572716E12, 262.0], [1.7572713E12, 299.0], [1.757271E12, 264.0], [1.75727166E12, 262.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75727136E12, 312.0], [1.75727106E12, 310.0], [1.75727172E12, 311.0], [1.75727142E12, 312.0], [1.75727112E12, 312.0], [1.75727076E12, 311.0], [1.75727082E12, 309.0], [1.75727178E12, 311.0], [1.75727148E12, 312.0], [1.75727118E12, 311.0], [1.7572707E12, 267.0], [1.75727184E12, 311.0], [1.75727088E12, 311.0], [1.75727154E12, 312.0], [1.75727124E12, 311.0], [1.75727064E12, 271.0], [1.75727094E12, 312.0], [1.7572716E12, 310.0], [1.7572713E12, 311.0], [1.757271E12, 313.0], [1.75727166E12, 311.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75727184E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 311.0, "minX": 1.0, "maxY": 7251.0, "series": [{"data": [[2.0, 1061.5], [8.0, 311.0], [9.0, 311.0], [10.0, 311.0], [11.0, 311.0], [12.0, 311.0], [3.0, 313.0], [13.0, 311.0], [14.0, 311.0], [15.0, 311.0], [4.0, 312.0], [16.0, 311.0], [1.0, 313.5], [17.0, 1246.0], [18.0, 312.0], [5.0, 312.0], [6.0, 312.0], [7.0, 312.0], [30.0, 4248.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5855.5], [17.0, 3310.0], [12.0, 6310.0], [14.0, 7251.0], [30.0, 7215.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 311.0, "minX": 1.0, "maxY": 7251.0, "series": [{"data": [[2.0, 1061.5], [8.0, 311.0], [9.0, 311.0], [10.0, 311.0], [11.0, 311.0], [12.0, 311.0], [3.0, 313.0], [13.0, 311.0], [14.0, 311.0], [15.0, 311.0], [4.0, 312.0], [16.0, 311.0], [1.0, 313.5], [17.0, 1246.0], [18.0, 312.0], [5.0, 312.0], [6.0, 312.0], [7.0, 312.0], [30.0, 4248.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5855.5], [17.0, 3310.0], [12.0, 6310.0], [14.0, 7251.0], [30.0, 7215.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.75727064E12, "maxY": 8.4, "series": [{"data": [[1.75727136E12, 8.316666666666666], [1.75727106E12, 8.383333333333333], [1.75727172E12, 8.283333333333333], [1.75727142E12, 8.366666666666667], [1.75727112E12, 8.35], [1.75727076E12, 8.216666666666667], [1.75727082E12, 8.35], [1.75727178E12, 8.266666666666667], [1.75727148E12, 8.333333333333334], [1.75727118E12, 8.35], [1.7572707E12, 8.4], [1.75727184E12, 7.516666666666667], [1.75727088E12, 8.333333333333334], [1.75727154E12, 8.4], [1.75727124E12, 8.333333333333334], [1.75727064E12, 0.8833333333333333], [1.75727094E12, 8.35], [1.7572716E12, 8.266666666666667], [1.7572713E12, 8.25], [1.757271E12, 8.316666666666666], [1.75727166E12, 8.383333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75727184E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75727064E12, "maxY": 8.483333333333333, "series": [{"data": [[1.75727136E12, 8.3], [1.75727106E12, 8.35], [1.75727172E12, 8.266666666666667], [1.75727142E12, 8.383333333333333], [1.75727112E12, 8.4], [1.75727076E12, 8.166666666666666], [1.75727082E12, 8.3], [1.75727178E12, 8.333333333333334], [1.75727148E12, 8.233333333333333], [1.75727118E12, 8.333333333333334], [1.7572707E12, 8.433333333333334], [1.75727184E12, 7.566666666666666], [1.75727088E12, 8.316666666666666], [1.75727154E12, 8.483333333333333], [1.75727124E12, 8.333333333333334], [1.75727064E12, 0.8333333333333334], [1.75727094E12, 8.433333333333334], [1.7572716E12, 8.316666666666666], [1.7572713E12, 8.25], [1.757271E12, 8.166666666666666], [1.75727166E12, 8.233333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.757271E12, 0.08333333333333333], [1.75727166E12, 0.08333333333333333]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.757271E12, 0.03333333333333333], [1.75727166E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75727184E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75727064E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.75727136E12, 2.816666666666667], [1.75727106E12, 2.7666666666666666], [1.75727172E12, 2.7333333333333334], [1.75727142E12, 2.7333333333333334], [1.75727112E12, 2.8], [1.75727076E12, 2.7], [1.75727082E12, 2.7666666666666666], [1.75727178E12, 2.7666666666666666], [1.75727148E12, 2.7666666666666666], [1.75727118E12, 2.75], [1.7572707E12, 2.816666666666667], [1.75727184E12, 2.55], [1.75727088E12, 2.8], [1.75727154E12, 2.8333333333333335], [1.75727124E12, 2.7666666666666666], [1.75727064E12, 0.2833333333333333], [1.75727094E12, 2.8], [1.7572716E12, 2.7333333333333334], [1.7572713E12, 2.75], [1.757271E12, 2.8], [1.75727166E12, 2.816666666666667]], "isOverall": false, "label": "Create Booking-success", "isController": false}, {"data": [[1.757271E12, 0.08333333333333333], [1.75727166E12, 0.08333333333333333]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.75727136E12, 2.75], [1.75727106E12, 2.783333333333333], [1.75727172E12, 2.783333333333333], [1.75727142E12, 2.783333333333333], [1.75727112E12, 2.8], [1.75727076E12, 2.716666666666667], [1.75727082E12, 2.7666666666666666], [1.75727178E12, 2.783333333333333], [1.75727148E12, 2.816666666666667], [1.75727118E12, 2.783333333333333], [1.7572707E12, 2.783333333333333], [1.75727184E12, 2.4166666666666665], [1.75727088E12, 2.783333333333333], [1.75727154E12, 2.7666666666666666], [1.75727124E12, 2.75], [1.75727064E12, 0.36666666666666664], [1.75727094E12, 2.8], [1.7572716E12, 2.816666666666667], [1.7572713E12, 2.783333333333333], [1.757271E12, 2.75], [1.75727166E12, 2.716666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.757271E12, 0.03333333333333333], [1.75727166E12, 0.016666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.75727136E12, 2.7333333333333334], [1.75727106E12, 2.8], [1.75727172E12, 2.75], [1.75727142E12, 2.8666666666666667], [1.75727112E12, 2.8], [1.75727076E12, 2.75], [1.75727082E12, 2.7666666666666666], [1.75727178E12, 2.783333333333333], [1.75727148E12, 2.65], [1.75727118E12, 2.8], [1.7572707E12, 2.8333333333333335], [1.75727184E12, 2.6], [1.75727088E12, 2.7333333333333334], [1.75727154E12, 2.8833333333333333], [1.75727124E12, 2.816666666666667], [1.75727064E12, 0.18333333333333332], [1.75727094E12, 2.8333333333333335], [1.7572716E12, 2.7666666666666666], [1.7572713E12, 2.716666666666667], [1.757271E12, 2.6166666666666667], [1.75727166E12, 2.7]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75727184E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.75727064E12, "maxY": 8.483333333333333, "series": [{"data": [[1.75727136E12, 8.3], [1.75727106E12, 8.35], [1.75727172E12, 8.266666666666667], [1.75727142E12, 8.383333333333333], [1.75727112E12, 8.4], [1.75727076E12, 8.166666666666666], [1.75727082E12, 8.3], [1.75727178E12, 8.333333333333334], [1.75727148E12, 8.233333333333333], [1.75727118E12, 8.333333333333334], [1.7572707E12, 8.433333333333334], [1.75727184E12, 7.566666666666666], [1.75727088E12, 8.316666666666666], [1.75727154E12, 8.483333333333333], [1.75727124E12, 8.333333333333334], [1.75727064E12, 0.8333333333333334], [1.75727094E12, 8.433333333333334], [1.7572716E12, 8.316666666666666], [1.7572713E12, 8.25], [1.757271E12, 8.166666666666666], [1.75727166E12, 8.233333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.757271E12, 0.11666666666666667], [1.75727166E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75727184E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

